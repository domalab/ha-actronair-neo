{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ActronAir Neo Integration Documentation","text":"<p>Welcome to the documentation for the ActronAir Neo integration for Home Assistant. This documentation provides comprehensive information for both users and developers.</p>"},{"location":"#overview","title":"Overview","text":"<p>The ActronAir Neo Integration enables seamless control and monitoring of your ActronAir Neo air conditioning system directly from Home Assistant. With this integration, you can automate climate control, monitor indoor and outdoor temperatures, and adjust settings based on real-time data, all from one central location.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Comprehensive Control: Easily switch between modes (heat, cool, fan, auto), set temperatures, and adjust fan speeds.</li> <li>Real-time Monitoring: Keep track of your home's temperature and humidity levels with up-to-date readings.</li> <li>Zone Control: Manage individual zones in your home for targeted climate control.</li> <li>Automation Friendly: Integrate ActronAir Neo into your Home Assistant automations to maintain optimal comfort with minimal effort.</li> <li>Periodic Updates: The system state is automatically refreshed based on your configured interval, ensuring your data is always current.</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":""},{"location":"#user-documentation","title":"User Documentation","text":"<ul> <li>Installation Guide: How to install the integration</li> <li>Configuration Guide: How to configure the integration</li> <li>Usage Guide: How to use the integration</li> <li>Troubleshooting Guide: How to troubleshoot common issues</li> <li>FAQ: Frequently asked questions</li> </ul>"},{"location":"#developer-documentation","title":"Developer Documentation","text":"<ul> <li>Architecture Overview: Overview of the integration architecture</li> <li>API Reference: Detailed API documentation</li> <li>Contributing Guide: How to contribute to the integration</li> <li>Testing Guide: How to test the integration</li> <li>Type System: Information about the type system</li> </ul>"},{"location":"#api-documentation","title":"API Documentation","text":"<ul> <li>Authentication: How authentication works</li> <li>Commands: How to send commands to the API</li> <li>Queries: How to query data from the API</li> <li>Responses: Structure of API responses</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>If you're a user looking to install and use the integration, start with the Installation Guide and then proceed to the Configuration Guide.</p> <p>If you're a developer looking to contribute to the integration, start with the Architecture Overview and then proceed to the Contributing Guide.</p>"},{"location":"#support","title":"Support","text":"<p>If you encounter any issues or have questions, please:</p> <ol> <li>Check the Troubleshooting Guide and FAQ</li> <li>Search for existing issues on the GitHub repository</li> <li>Open a new issue if your problem isn't already reported</li> </ol>"},{"location":"#license","title":"License","text":"<p>This integration is released under the Apache License. See the LICENSE file for details.</p>"},{"location":"documentation_improvements/","title":"Documentation Improvements","text":"<p>While the ActronAir Neo integration has good documentation, it could be more structured and comprehensive to better serve both users and developers. This document outlines recommendations for improving the documentation.</p>"},{"location":"documentation_improvements/#current-documentation-status","title":"Current Documentation Status","text":"<p>The integration currently has: - A comprehensive README.md with installation, configuration, and usage instructions - A CHANGELOG.md that follows the Keep a Changelog format - API documentation in the utils directory (ActronAirNeoAPI.md and actron_api_structure.md)</p>"},{"location":"documentation_improvements/#recommendations-for-improvement","title":"Recommendations for Improvement","text":""},{"location":"documentation_improvements/#1-create-a-dedicated-documentation-structure","title":"1. Create a Dedicated Documentation Structure","text":"<p>Create a structured documentation directory with the following organization:</p> <pre><code>docs/\n\u251c\u2500\u2500 user/\n\u2502   \u251c\u2500\u2500 installation.md\n\u2502   \u251c\u2500\u2500 configuration.md\n\u2502   \u251c\u2500\u2500 usage.md\n\u2502   \u251c\u2500\u2500 troubleshooting.md\n\u2502   \u2514\u2500\u2500 faq.md\n\u251c\u2500\u2500 developer/\n\u2502   \u251c\u2500\u2500 architecture.md\n\u2502   \u251c\u2500\u2500 api_reference.md\n\u2502   \u251c\u2500\u2500 contributing.md\n\u2502   \u251c\u2500\u2500 testing.md\n\u2502   \u2514\u2500\u2500 type_system.md\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 authentication.md\n\u2502   \u251c\u2500\u2500 commands.md\n\u2502   \u251c\u2500\u2500 queries.md\n\u2502   \u2514\u2500\u2500 responses.md\n\u2514\u2500\u2500 assets/\n    \u2514\u2500\u2500 images/\n</code></pre>"},{"location":"documentation_improvements/#2-enhance-api-documentation","title":"2. Enhance API Documentation","text":"<ul> <li>Move the existing API documentation from utils/ to docs/api/</li> <li>Add more code examples for common operations</li> <li>Include error handling examples</li> <li>Document rate limiting behavior and best practices</li> <li>Add sequence diagrams for authentication and command flows</li> </ul>"},{"location":"documentation_improvements/#3-add-developer-documentation","title":"3. Add Developer Documentation","text":"<ul> <li>Create a comprehensive architecture overview</li> <li>Document the coordinator pattern used in the integration</li> <li>Explain the entity model and how it maps to Home Assistant concepts</li> <li>Add type definitions documentation</li> <li>Include a guide for adding new features or entities</li> </ul>"},{"location":"documentation_improvements/#4-improve-user-documentation","title":"4. Improve User Documentation","text":"<ul> <li>Add screenshots of the integration in Home Assistant</li> <li>Create step-by-step guides for common tasks</li> <li>Expand the troubleshooting section with common issues and solutions</li> <li>Add a FAQ section based on GitHub issues</li> <li>Include examples of automation configurations</li> </ul>"},{"location":"documentation_improvements/#5-use-documentation-generation-tools","title":"5. Use Documentation Generation Tools","text":"<p>Consider using a documentation generator like Sphinx or MkDocs to: - Generate API reference documentation from docstrings - Create a searchable documentation website - Enable versioned documentation - Support automatic table of contents generation</p> <p>Example configuration for MkDocs:</p> <pre><code># mkdocs.yml\nsite_name: ActronAir Neo Integration\ntheme: material\nrepo_url: https://github.com/domalab/ha-actronair-neo\nnav:\n  - Home: index.md\n  - User Guide:\n    - Installation: user/installation.md\n    - Configuration: user/configuration.md\n    - Usage: user/usage.md\n    - Troubleshooting: user/troubleshooting.md\n    - FAQ: user/faq.md\n  - Developer Guide:\n    - Architecture: developer/architecture.md\n    - API Reference: developer/api_reference.md\n    - Contributing: developer/contributing.md\n    - Testing: developer/testing.md\n    - Type System: developer/type_system.md\n  - API Documentation:\n    - Authentication: api/authentication.md\n    - Commands: api/commands.md\n    - Queries: api/queries.md\n    - Responses: api/responses.md\n  - Changelog: changelog.md\n</code></pre>"},{"location":"documentation_improvements/#6-add-a-changelog-generator","title":"6. Add a Changelog Generator","text":"<p>Implement a changelog generator that automatically updates the CHANGELOG.md file based on commit messages or pull request descriptions. This ensures that the changelog is always up-to-date.</p>"},{"location":"documentation_improvements/#7-include-documentation-in-cicd-pipeline","title":"7. Include Documentation in CI/CD Pipeline","text":"<ul> <li>Add documentation linting to the CI/CD pipeline</li> <li>Automatically build and deploy documentation on changes</li> <li>Verify links and references in documentation</li> </ul>"},{"location":"documentation_improvements/#8-create-documentation-templates","title":"8. Create Documentation Templates","text":"<p>Provide templates for: - Issue reporting - Feature requests - Pull requests - Documentation contributions</p>"},{"location":"documentation_improvements/#9-add-code-examples","title":"9. Add Code Examples","text":"<p>Include more code examples for: - Custom automations using the integration - Advanced configuration scenarios - Integration with other Home Assistant components</p>"},{"location":"documentation_improvements/#10-implement-version-specific-documentation","title":"10. Implement Version-Specific Documentation","text":"<p>As the integration evolves, maintain documentation for different versions to help users who may be using older versions of the integration.</p>"},{"location":"documentation_improvements/#implementation-plan","title":"Implementation Plan","text":"<ol> <li>Short-term (1-2 weeks):</li> <li>Create the basic documentation structure</li> <li>Move existing documentation to the new structure</li> <li> <p>Add missing essential documentation</p> </li> <li> <p>Medium-term (1-2 months):</p> </li> <li>Implement a documentation generator</li> <li>Enhance API documentation with more examples</li> <li> <p>Add developer documentation</p> </li> <li> <p>Long-term (3+ months):</p> </li> <li>Integrate documentation into CI/CD</li> <li>Implement version-specific documentation</li> <li>Create a documentation contribution guide</li> </ol>"},{"location":"documentation_improvements/#conclusion","title":"Conclusion","text":"<p>Improving the documentation will make the ActronAir Neo integration more accessible to users and developers, reduce support requests, and encourage community contributions. The structured approach outlined above provides a clear path to comprehensive documentation that will grow with the integration.</p>"},{"location":"api/authentication/","title":"Authentication","text":"<p>This document explains the authentication process for the ActronAir Neo API.</p>"},{"location":"api/authentication/#authentication-flow","title":"Authentication Flow","text":"<p>The ActronAir Neo API uses a two-step OAuth 2.0 authentication flow:</p> <ol> <li>Request a pairing token (refresh token) using username and password</li> <li>Exchange the pairing token for an access token (bearer token)</li> </ol> <pre><code>sequenceDiagram\n    participant Client\n    participant API as ActronAir Neo API\n\n    Client-&gt;&gt;API: POST /api/v0/client/user-devices (username, password)\n    API--&gt;&gt;Client: Pairing Token\n    Client-&gt;&gt;API: POST /api/v0/oauth/token (pairing_token)\n    API--&gt;&gt;Client: Access Token\n    Client-&gt;&gt;API: API Requests with Access Token\n    API--&gt;&gt;Client: API Responses</code></pre>"},{"location":"api/authentication/#step-1-request-pairing-token","title":"Step 1: Request Pairing Token","text":"<p>The first step is to request a pairing token by providing your ActronAir Neo account credentials.</p>"},{"location":"api/authentication/#request","title":"Request","text":"<p>Endpoint: <code>POST /api/v0/client/user-devices</code></p> <p>Headers: <pre><code>Host: nimbus.actronair.com.au\nContent-Type: application/x-www-form-urlencoded\n</code></pre></p> <p>Body Parameters: | Parameter | Description | |-----------|-------------| | username | Your ActronAir Neo account username (email) | | password | Your ActronAir Neo account password | | client | Client type (ios, android, windowsphone, or loadtest) | | deviceName | A unique name for the device being authorized | | deviceUniqueIdentifier | A unique identifier for the device |</p> <p>Example Request: <pre><code>POST /api/v0/client/user-devices HTTP/1.1\nHost: nimbus.actronair.com.au\nContent-Type: application/x-www-form-urlencoded\n\nusername=your_email@example.com&amp;password=your_password&amp;client=ios&amp;deviceName=HomeAssistant&amp;deviceUniqueIdentifier=ha-actronair-neo-12345\n</code></pre></p>"},{"location":"api/authentication/#response","title":"Response","text":"<p>Success Response (200 OK): <pre><code>{\n    \"id\": \"device_id_value\",\n    \"deviceName\": \"HomeAssistant\",\n    \"pairingToken\": \"pairing_token_value\",\n    \"expires\": \"2023-12-31T23:59:59Z\",\n    \"_links\": {\n        \"self\": {\n            \"href\": \"/api/v0/client/user-devices/device_id_value\"\n        }\n    }\n}\n</code></pre></p> <p>Error Response (401 Unauthorized): <pre><code>{\n    \"error\": \"invalid_grant\",\n    \"error_description\": \"The user credentials are incorrect.\"\n}\n</code></pre></p>"},{"location":"api/authentication/#step-2-exchange-pairing-token-for-access-token","title":"Step 2: Exchange Pairing Token for Access Token","text":"<p>The second step is to exchange the pairing token for an access token.</p>"},{"location":"api/authentication/#request_1","title":"Request","text":"<p>Endpoint: <code>POST /api/v0/oauth/token</code></p> <p>Headers: <pre><code>Host: nimbus.actronair.com.au\nContent-Type: application/x-www-form-urlencoded\n</code></pre></p> <p>Body Parameters: | Parameter | Description | |-----------|-------------| | grant_type | Must be \"refresh_token\" | | refresh_token | The pairing token received in step 1 | | client_id | Must be \"app\" |</p> <p>Example Request: <pre><code>POST /api/v0/oauth/token HTTP/1.1\nHost: nimbus.actronair.com.au\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=refresh_token&amp;refresh_token=pairing_token_value&amp;client_id=app\n</code></pre></p>"},{"location":"api/authentication/#response_1","title":"Response","text":"<p>Success Response (200 OK): <pre><code>{\n    \"access_token\": \"access_token_value\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 259199\n}\n</code></pre></p> <p>Error Response (400 Bad Request): <pre><code>{\n    \"error\": \"invalid_grant\",\n    \"error_description\": \"The refresh token is invalid.\"\n}\n</code></pre></p>"},{"location":"api/authentication/#using-the-access-token","title":"Using the Access Token","text":"<p>After obtaining the access token, include it in the <code>Authorization</code> header of all API requests.</p> <p>Example: <pre><code>GET /api/v0/client/ac-systems HTTP/1.1\nHost: nimbus.actronair.com.au\nAuthorization: Bearer access_token_value\n</code></pre></p>"},{"location":"api/authentication/#token-expiration-and-renewal","title":"Token Expiration and Renewal","text":"<p>The access token expires after the time specified in the <code>expires_in</code> field (in seconds). When the token expires, you need to request a new one using the pairing token.</p> <p>If the pairing token also expires, you need to start the authentication process from the beginning.</p>"},{"location":"api/authentication/#implementation-in-the-integration","title":"Implementation in the Integration","text":"<p>The ActronAir Neo integration handles authentication automatically:</p> <ol> <li>During setup, the user provides their ActronAir Neo account credentials</li> <li>The integration requests a pairing token and stores it securely</li> <li>The integration exchanges the pairing token for an access token</li> <li>The integration uses the access token for all API requests</li> <li>When the access token expires, the integration automatically renews it</li> <li>If the pairing token expires, the integration prompts the user to re-authenticate</li> </ol>"},{"location":"api/authentication/#error-handling","title":"Error Handling","text":"<p>The integration handles various authentication errors:</p> Error Description Resolution Invalid credentials Username or password is incorrect User needs to provide correct credentials Invalid refresh token Pairing token has expired or is invalid Integration requests a new pairing token Rate limiting Too many authentication attempts Integration implements exponential backoff Network errors Connection issues Integration retries with backoff"},{"location":"api/authentication/#security-considerations","title":"Security Considerations","text":"<p>The integration follows these security best practices:</p> <ol> <li>Credentials are stored securely in Home Assistant's secure storage</li> <li>Tokens are never logged or exposed in the UI</li> <li>HTTPS is used for all API communication</li> <li>Minimal permissions are requested</li> </ol>"},{"location":"api/authentication/#code-example","title":"Code Example","text":"<p>Here's how the integration handles authentication:</p> <pre><code>async def authenticate(self) -&gt; bool:\n    \"\"\"Authenticate with the ActronAir Neo API.\"\"\"\n    try:\n        # Step 1: Request pairing token\n        pairing_response = await self._request_pairing_token()\n        pairing_token = pairing_response[\"pairingToken\"]\n\n        # Step 2: Exchange for access token\n        token_response = await self._request_access_token(pairing_token)\n        self._access_token = token_response[\"access_token\"]\n        self._token_type = token_response[\"token_type\"]\n        self._token_expiry = time.time() + token_response[\"expires_in\"]\n\n        return True\n    except ActronNeoAuthenticationError:\n        # Handle authentication errors\n        return False\n</code></pre>"},{"location":"api/authentication/#next-steps","title":"Next Steps","text":"<ul> <li>Commands: Learn how to send commands to the ActronAir Neo API</li> <li>Queries: Learn how to query data from the ActronAir Neo API</li> </ul>"},{"location":"api/commands/","title":"Commands","text":"<p>This document explains how to send commands to the ActronAir Neo API to control your air conditioning system.</p>"},{"location":"api/commands/#command-structure","title":"Command Structure","text":"<p>Commands are sent as JSON objects to the API. All commands follow this general structure:</p> <pre><code>{\n    \"command\": {\n        \"requested.command-1\": \"setting\",\n        \"requested.command-2\": \"setting\",\n        ...\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#sending-commands","title":"Sending Commands","text":""},{"location":"api/commands/#request","title":"Request","text":"<p>Endpoint: <code>POST /api/v0/client/ac-systems/cmds/send?serial={serial_number}</code></p> <p>Headers: <pre><code>Host: nimbus.actronair.com.au\nAuthorization: Bearer {access_token}\nContent-Type: application/json\n</code></pre></p> <p>Example Request: <pre><code>POST /api/v0/client/ac-systems/cmds/send?serial=ABC123456 HTTP/1.1\nHost: nimbus.actronair.com.au\nAuthorization: Bearer access_token_value\nContent-Type: application/json\n\n{\n    \"command\": {\n        \"UserAirconSettings.isOn\": true,\n        \"UserAirconSettings.Mode\": \"COOL\",\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre></p>"},{"location":"api/commands/#response","title":"Response","text":"<p>Success Response (200 OK): <pre><code>{\n    \"result\": \"OK\",\n    \"message\": \"Command sent successfully\"\n}\n</code></pre></p> <p>Error Response (400 Bad Request): <pre><code>{\n    \"error\": {\n        \"code\": \"invalid_command\",\n        \"message\": \"Invalid command format\"\n    }\n}\n</code></pre></p>"},{"location":"api/commands/#common-commands","title":"Common Commands","text":""},{"location":"api/commands/#power-control","title":"Power Control","text":""},{"location":"api/commands/#turn-system-on","title":"Turn System On","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.isOn\": true,\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#turn-system-off","title":"Turn System Off","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.isOn\": false,\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#mode-control","title":"Mode Control","text":""},{"location":"api/commands/#set-mode-to-cool","title":"Set Mode to Cool","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.Mode\": \"COOL\",\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#set-mode-to-heat","title":"Set Mode to Heat","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.Mode\": \"HEAT\",\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#set-mode-to-fan-only","title":"Set Mode to Fan Only","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.Mode\": \"FAN\",\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#set-mode-to-auto","title":"Set Mode to Auto","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.Mode\": \"AUTO\",\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#temperature-control","title":"Temperature Control","text":""},{"location":"api/commands/#set-cooling-temperature","title":"Set Cooling Temperature","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.TemperatureSetpoint_Cool_oC\": 24.0,\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#set-heating-temperature","title":"Set Heating Temperature","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.TemperatureSetpoint_Heat_oC\": 21.0,\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#set-both-cooling-and-heating-temperatures-for-auto-mode","title":"Set Both Cooling and Heating Temperatures (for Auto Mode)","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.TemperatureSetpoint_Cool_oC\": 24.0,\n        \"UserAirconSettings.TemperatureSetpoint_Heat_oC\": 21.0,\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#fan-control","title":"Fan Control","text":""},{"location":"api/commands/#set-fan-mode-to-auto","title":"Set Fan Mode to Auto","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.FanMode\": \"AUTO\",\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#set-fan-mode-to-low","title":"Set Fan Mode to Low","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.FanMode\": \"LOW\",\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#set-fan-mode-to-medium","title":"Set Fan Mode to Medium","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.FanMode\": \"MED\",\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#set-fan-mode-to-high","title":"Set Fan Mode to High","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.FanMode\": \"HIGH\",\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#set-fan-mode-to-continuous","title":"Set Fan Mode to Continuous","text":"<p>For continuous fan operation, append \"-CONT\" to the fan mode:</p> <pre><code>{\n    \"command\": {\n        \"UserAirconSettings.FanMode\": \"LOW-CONT\",\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre> <p>Note: Continuous fan mode is not available with AUTO fan mode.</p>"},{"location":"api/commands/#zone-control","title":"Zone Control","text":""},{"location":"api/commands/#enable-a-zone","title":"Enable a Zone","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.EnabledZones[0]\": true,\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#disable-a-zone","title":"Disable a Zone","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.EnabledZones[0]\": false,\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#control-multiple-zones","title":"Control Multiple Zones","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.EnabledZones[0]\": true,\n        \"UserAirconSettings.EnabledZones[1]\": true,\n        \"UserAirconSettings.EnabledZones[2]\": false,\n        \"UserAirconSettings.EnabledZones[3]\": false,\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#set-zone-temperature-cooling","title":"Set Zone Temperature (Cooling)","text":"<pre><code>{\n    \"command\": {\n        \"RemoteZoneInfo[0].TemperatureSetpoint_Cool_oC\": 23.0,\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#set-zone-temperature-heating","title":"Set Zone Temperature (Heating)","text":"<pre><code>{\n    \"command\": {\n        \"RemoteZoneInfo[0].TemperatureSetpoint_Heat_oC\": 22.0,\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#special-modes","title":"Special Modes","text":""},{"location":"api/commands/#set-away-mode","title":"Set Away Mode","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.AwayMode\": true,\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#set-quiet-mode","title":"Set Quiet Mode","text":"<pre><code>{\n    \"command\": {\n        \"UserAirconSettings.QuietMode\": true,\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#combining-commands","title":"Combining Commands","text":"<p>Multiple commands can be combined in a single request:</p> <pre><code>{\n    \"command\": {\n        \"UserAirconSettings.isOn\": true,\n        \"UserAirconSettings.Mode\": \"COOL\",\n        \"UserAirconSettings.FanMode\": \"AUTO\",\n        \"UserAirconSettings.TemperatureSetpoint_Cool_oC\": 24.0,\n        \"UserAirconSettings.EnabledZones[0]\": true,\n        \"UserAirconSettings.EnabledZones[1]\": true,\n        \"type\": \"set-settings\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#error-handling","title":"Error Handling","text":"<p>The API may return various error responses:</p> Error Code Description Resolution invalid_command The command format is invalid Check the command structure invalid_parameter A parameter value is invalid Check parameter values device_offline The device is offline Check device connectivity rate_limit_exceeded Too many commands sent Implement rate limiting"},{"location":"api/commands/#implementation-in-the-integration","title":"Implementation in the Integration","text":"<p>The ActronAir Neo integration provides helper methods for common commands:</p> <pre><code>async def set_power(self, device_id: str, power_on: bool) -&gt; bool:\n    \"\"\"Turn the AC on or off.\"\"\"\n    command = {\n        \"command\": {\n            \"UserAirconSettings.isOn\": power_on,\n            \"type\": \"set-settings\"\n        }\n    }\n    return await self.send_command(device_id, command)\n\nasync def set_mode(self, device_id: str, mode: str) -&gt; bool:\n    \"\"\"Set the AC mode.\"\"\"\n    mode = self.validate_mode(mode)\n    command = {\n        \"command\": {\n            \"UserAirconSettings.Mode\": mode,\n            \"type\": \"set-settings\"\n        }\n    }\n    return await self.send_command(device_id, command)\n</code></pre>"},{"location":"api/commands/#rate-limiting","title":"Rate Limiting","text":"<p>The ActronAir Neo API has rate limits to prevent abuse. The integration implements rate limiting to stay within these limits:</p> <pre><code>self._rate_limiter = asyncio.Semaphore(5)  # Limit to 5 concurrent requests\n\nasync def send_command(self, device_id: str, command: Dict[str, Any]) -&gt; bool:\n    \"\"\"Send a command to the AC.\"\"\"\n    async with self._rate_limiter:\n        # Send command\n        # ...\n</code></pre>"},{"location":"api/commands/#next-steps","title":"Next Steps","text":"<ul> <li>Queries: Learn how to query data from the ActronAir Neo API</li> <li>Responses: Learn about the structure of API responses</li> </ul>"},{"location":"api/queries/","title":"Queries","text":"<p>This document explains how to query data from the ActronAir Neo API to retrieve information about your air conditioning system.</p>"},{"location":"api/queries/#query-structure","title":"Query Structure","text":"<p>Queries are sent as GET requests to the API. The response is a JSON object containing the requested data.</p>"},{"location":"api/queries/#common-queries","title":"Common Queries","text":""},{"location":"api/queries/#list-ac-systems","title":"List AC Systems","text":"<p>Retrieves a list of all AC systems associated with your account.</p>"},{"location":"api/queries/#request","title":"Request","text":"<p>Endpoint: <code>GET /api/v0/client/ac-systems?includeNeo=true</code></p> <p>Headers: <pre><code>Host: nimbus.actronair.com.au\nAuthorization: Bearer {access_token}\n</code></pre></p> <p>Example Request: <pre><code>GET /api/v0/client/ac-systems?includeNeo=true HTTP/1.1\nHost: nimbus.actronair.com.au\nAuthorization: Bearer access_token_value\n</code></pre></p>"},{"location":"api/queries/#response","title":"Response","text":"<p>Success Response (200 OK): <pre><code>{\n    \"items\": [\n        {\n            \"serial\": \"ABC123456\",\n            \"name\": \"Living Room AC\",\n            \"type\": \"Neo\",\n            \"id\": \"device_id_value\",\n            \"_links\": {\n                \"self\": {\n                    \"href\": \"/api/v0/client/ac-systems/ABC123456\"\n                }\n            }\n        }\n    ],\n    \"_links\": {\n        \"self\": {\n            \"href\": \"/api/v0/client/ac-systems\"\n        }\n    }\n}\n</code></pre></p>"},{"location":"api/queries/#get-system-status","title":"Get System Status","text":"<p>Retrieves the current status of a specific AC system.</p>"},{"location":"api/queries/#request_1","title":"Request","text":"<p>Endpoint: <code>GET /api/v0/client/ac-systems/status/latest?serial={serial_number}</code></p> <p>Headers: <pre><code>Host: nimbus.actronair.com.au\nAuthorization: Bearer {access_token}\n</code></pre></p> <p>Example Request: <pre><code>GET /api/v0/client/ac-systems/status/latest?serial=ABC123456 HTTP/1.1\nHost: nimbus.actronair.com.au\nAuthorization: Bearer access_token_value\n</code></pre></p>"},{"location":"api/queries/#response_1","title":"Response","text":"<p>Success Response (200 OK): <pre><code>{\n    \"lastKnownState\": {\n        \"MasterInfo\": {\n            \"LiveTemp_oC\": 24.5,\n            \"LiveHumidity_pc\": 50.0\n        },\n        \"RemoteZoneInfo\": [\n            {\n                \"Index\": 0,\n                \"Name\": \"Living Room\",\n                \"Type\": 0,\n                \"LiveTemp_oC\": 24.5,\n                \"UserSetpoint_oC\": 24.0,\n                \"UserEnabled\": true,\n                \"TemperatureAvailable\": true,\n                \"ControlAvailable\": true,\n                \"Master\": true,\n                \"LiveHumidity_pc\": 50.0\n            },\n            {\n                \"Index\": 1,\n                \"Name\": \"Bedroom\",\n                \"Type\": 0,\n                \"LiveTemp_oC\": 23.5,\n                \"UserSetpoint_oC\": 23.0,\n                \"UserEnabled\": true,\n                \"TemperatureAvailable\": true,\n                \"ControlAvailable\": true,\n                \"Master\": false,\n                \"LiveHumidity_pc\": 48.0\n            }\n        ],\n        \"LiveAircon\": {\n            \"Filter\": {\n                \"NeedsAttention\": false,\n                \"TimeToClean_days\": 30\n            },\n            \"CompressorMode\": \"COOL\",\n            \"CompressorState\": \"RUNNING\",\n            \"FanState\": \"RUNNING\",\n            \"Defrost\": false\n        },\n        \"UserAirconSettings\": {\n            \"isOn\": true,\n            \"Mode\": \"COOL\",\n            \"FanMode\": \"AUTO\",\n            \"TemperatureSetpoint_Cool_oC\": 24.0,\n            \"TemperatureSetpoint_Heat_oC\": 21.0,\n            \"EnabledZones\": [true, true, false, false, false, false, false, false],\n            \"AwayMode\": false,\n            \"QuietMode\": false\n        },\n        \"AirconSystem\": {\n            \"MasterSerial\": \"ABC123456\",\n            \"MasterWCFirmwareVersion\": \"1.2.3\",\n            \"IndoorUnit\": {\n                \"NV_ModelNumber\": \"NEO-12\"\n            }\n        },\n        \"Alerts\": {\n            \"CleanFilter\": false,\n            \"Defrosting\": false\n        }\n    }\n}\n</code></pre></p>"},{"location":"api/queries/#get-system-events","title":"Get System Events","text":"<p>Retrieves recent events for a specific AC system.</p>"},{"location":"api/queries/#request_2","title":"Request","text":"<p>Endpoint: <code>GET /api/v0/client/ac-systems/events/latest?serial={serial_number}</code></p> <p>Headers: <pre><code>Host: nimbus.actronair.com.au\nAuthorization: Bearer {access_token}\n</code></pre></p> <p>Example Request: <pre><code>GET /api/v0/client/ac-systems/events/latest?serial=ABC123456 HTTP/1.1\nHost: nimbus.actronair.com.au\nAuthorization: Bearer access_token_value\n</code></pre></p>"},{"location":"api/queries/#response_2","title":"Response","text":"<p>Success Response (200 OK): <pre><code>{\n    \"items\": [\n        {\n            \"id\": \"event_id_value\",\n            \"type\": \"status-change-broadcast\",\n            \"pairedUserId\": \"user_id_value\",\n            \"timestamp\": \"2023-09-01T12:00:00Z\",\n            \"data\": {\n                \"UserAirconSettings.isOn\": true,\n                \"UserAirconSettings.Mode\": \"COOL\",\n                \"RemoteZoneInfo[0].LiveTemp_oC\": 24.5,\n                \"@metadata\": {\n                    \"connectionId\": \"connection_id_value\",\n                    \"server\": \"server_value\"\n                }\n            }\n        }\n    ],\n    \"_links\": {\n        \"self\": {\n            \"href\": \"/api/v0/client/ac-systems/events/latest?serial=ABC123456\"\n        },\n        \"ac-newer-events\": {\n            \"href\": \"/api/v0/client/ac-systems/events/newer?serial=ABC123456&amp;newerThanEventId=event_id_value\",\n            \"title\": \"Get events newer than the current set\"\n        },\n        \"ac-older-events\": {\n            \"href\": \"/api/v0/client/ac-systems/events/older?serial=ABC123456&amp;olderThanEventId=event_id_value\",\n            \"title\": \"Get events older than the current set\"\n        }\n    }\n}\n</code></pre></p>"},{"location":"api/queries/#get-newer-events","title":"Get Newer Events","text":"<p>Retrieves events newer than a specific event ID.</p>"},{"location":"api/queries/#request_3","title":"Request","text":"<p>Endpoint: <code>GET /api/v0/client/ac-systems/events/newer?serial={serial_number}&amp;newerThanEventId={event_id}</code></p> <p>Headers: <pre><code>Host: nimbus.actronair.com.au\nAuthorization: Bearer {access_token}\n</code></pre></p> <p>Example Request: <pre><code>GET /api/v0/client/ac-systems/events/newer?serial=ABC123456&amp;newerThanEventId=event_id_value HTTP/1.1\nHost: nimbus.actronair.com.au\nAuthorization: Bearer access_token_value\n</code></pre></p>"},{"location":"api/queries/#get-older-events","title":"Get Older Events","text":"<p>Retrieves events older than a specific event ID.</p>"},{"location":"api/queries/#request_4","title":"Request","text":"<p>Endpoint: <code>GET /api/v0/client/ac-systems/events/older?serial={serial_number}&amp;olderThanEventId={event_id}</code></p> <p>Headers: <pre><code>Host: nimbus.actronair.com.au\nAuthorization: Bearer {access_token}\n</code></pre></p> <p>Example Request: <pre><code>GET /api/v0/client/ac-systems/events/older?serial=ABC123456&amp;olderThanEventId=event_id_value HTTP/1.1\nHost: nimbus.actronair.com.au\nAuthorization: Bearer access_token_value\n</code></pre></p>"},{"location":"api/queries/#data-structure","title":"Data Structure","text":""},{"location":"api/queries/#masterinfo","title":"MasterInfo","text":"<p>Contains information about the main unit.</p> Field Type Description LiveTemp_oC float Current temperature in degrees Celsius LiveHumidity_pc float Current humidity in percent"},{"location":"api/queries/#remotezoneinfo","title":"RemoteZoneInfo","text":"<p>Contains information about each zone.</p> Field Type Description Index int Zone index (0-7) Name string Zone name Type int Zone type LiveTemp_oC float Current temperature in degrees Celsius UserSetpoint_oC float Target temperature in degrees Celsius UserEnabled boolean Whether the zone is enabled TemperatureAvailable boolean Whether temperature sensing is available ControlAvailable boolean Whether the zone can be controlled Master boolean Whether this is the master zone LiveHumidity_pc float Current humidity in percent"},{"location":"api/queries/#liveaircon","title":"LiveAircon","text":"<p>Contains information about the current state of the air conditioner.</p> Field Type Description Filter.NeedsAttention boolean Whether the filter needs cleaning Filter.TimeToClean_days int Days until filter cleaning is recommended CompressorMode string Current compressor mode (COOL, HEAT, etc.) CompressorState string Current compressor state (RUNNING, OFF, etc.) FanState string Current fan state (RUNNING, OFF, etc.) Defrost boolean Whether defrost mode is active"},{"location":"api/queries/#userairconsettings","title":"UserAirconSettings","text":"<p>Contains user-configurable settings.</p> Field Type Description isOn boolean Whether the system is on Mode string Current mode (COOL, HEAT, FAN, AUTO) FanMode string Current fan mode (AUTO, LOW, MED, HIGH) TemperatureSetpoint_Cool_oC float Cooling setpoint in degrees Celsius TemperatureSetpoint_Heat_oC float Heating setpoint in degrees Celsius EnabledZones boolean[] Array of zone enabled states AwayMode boolean Whether away mode is active QuietMode boolean Whether quiet mode is active"},{"location":"api/queries/#airconsystem","title":"AirconSystem","text":"<p>Contains system information.</p> Field Type Description MasterSerial string Serial number of the master unit MasterWCFirmwareVersion string Firmware version IndoorUnit.NV_ModelNumber string Model number"},{"location":"api/queries/#alerts","title":"Alerts","text":"<p>Contains system alerts.</p> Field Type Description CleanFilter boolean Whether the filter needs cleaning Defrosting boolean Whether defrost mode is active"},{"location":"api/queries/#error-handling","title":"Error Handling","text":"<p>The API may return various error responses:</p> Error Code Description Resolution unauthorized Authentication required Re-authenticate device_not_found Device not found Check serial number rate_limit_exceeded Too many requests Implement rate limiting"},{"location":"api/queries/#implementation-in-the-integration","title":"Implementation in the Integration","text":"<p>The ActronAir Neo integration provides helper methods for common queries:</p> <pre><code>async def get_devices(self) -&gt; List[ActronNeoDeviceInfo]:\n    \"\"\"Get a list of available devices.\"\"\"\n    url = f\"{self.BASE_URL}/api/v0/client/ac-systems?includeNeo=true\"\n    response = await self._authenticated_request(\"GET\", url)\n\n    devices = []\n    for item in response.get(\"items\", []):\n        devices.append({\n            \"serial\": item.get(\"serial\", \"\"),\n            \"name\": item.get(\"name\", \"\"),\n            \"type\": item.get(\"type\", \"\"),\n            \"id\": item.get(\"id\", \"\")\n        })\n\n    return devices\n\nasync def get_system_status(self, device_id: str) -&gt; Dict[str, Any]:\n    \"\"\"Get the current status of a device.\"\"\"\n    url = f\"{self.BASE_URL}/api/v0/client/ac-systems/status/latest?serial={device_id}\"\n    return await self._authenticated_request(\"GET\", url)\n</code></pre>"},{"location":"api/queries/#rate-limiting","title":"Rate Limiting","text":"<p>The ActronAir Neo API has rate limits to prevent abuse. The integration implements rate limiting to stay within these limits:</p> <pre><code>self._rate_limiter = asyncio.Semaphore(5)  # Limit to 5 concurrent requests\n\nasync def _authenticated_request(self, method: str, url: str, **kwargs) -&gt; Dict[str, Any]:\n    \"\"\"Make an authenticated request to the API.\"\"\"\n    async with self._rate_limiter:\n        # Make request\n        # ...\n</code></pre>"},{"location":"api/queries/#next-steps","title":"Next Steps","text":"<ul> <li>Commands: Learn how to send commands to the ActronAir Neo API</li> <li>Responses: Learn about the structure of API responses</li> </ul>"},{"location":"api/responses/","title":"API Responses","text":"<p>This document explains the structure of responses from the ActronAir Neo API and how to interpret them.</p>"},{"location":"api/responses/#response-format","title":"Response Format","text":"<p>API responses are JSON objects with varying structures depending on the endpoint. Most responses follow these general patterns:</p>"},{"location":"api/responses/#collection-responses","title":"Collection Responses","text":"<p>Responses that return collections of items typically have this structure:</p> <pre><code>{\n    \"items\": [\n        {\n            // Item 1 data\n        },\n        {\n            // Item 2 data\n        }\n    ],\n    \"_links\": {\n        \"self\": {\n            \"href\": \"/api/v0/endpoint\"\n        },\n        \"related-resource\": {\n            \"href\": \"/api/v0/related-endpoint\",\n            \"title\": \"Description of related resource\"\n        }\n    }\n}\n</code></pre>"},{"location":"api/responses/#single-resource-responses","title":"Single Resource Responses","text":"<p>Responses that return a single resource typically have this structure:</p> <pre><code>{\n    // Resource data\n    \"_links\": {\n        \"self\": {\n            \"href\": \"/api/v0/endpoint/resource-id\"\n        }\n    }\n}\n</code></pre>"},{"location":"api/responses/#error-responses","title":"Error Responses","text":"<p>Error responses typically have this structure:</p> <pre><code>{\n    \"error\": {\n        \"code\": \"error_code\",\n        \"message\": \"Human-readable error message\"\n    }\n}\n</code></pre> <p>Or for authentication errors:</p> <pre><code>{\n    \"error\": \"invalid_grant\",\n    \"error_description\": \"The user credentials are incorrect.\"\n}\n</code></pre>"},{"location":"api/responses/#common-response-types","title":"Common Response Types","text":""},{"location":"api/responses/#device-list-response","title":"Device List Response","text":"<p>Response from <code>GET /api/v0/client/ac-systems</code>:</p> <pre><code>{\n    \"items\": [\n        {\n            \"serial\": \"ABC123456\",\n            \"name\": \"Living Room AC\",\n            \"type\": \"Neo\",\n            \"id\": \"device_id_value\",\n            \"_links\": {\n                \"self\": {\n                    \"href\": \"/api/v0/client/ac-systems/ABC123456\"\n                }\n            }\n        }\n    ],\n    \"_links\": {\n        \"self\": {\n            \"href\": \"/api/v0/client/ac-systems\"\n        }\n    }\n}\n</code></pre>"},{"location":"api/responses/#system-status-response","title":"System Status Response","text":"<p>Response from <code>GET /api/v0/client/ac-systems/status/latest?serial={serial_number}</code>:</p> <pre><code>{\n    \"lastKnownState\": {\n        \"MasterInfo\": {\n            \"LiveTemp_oC\": 24.5,\n            \"LiveHumidity_pc\": 50.0\n        },\n        \"RemoteZoneInfo\": [\n            {\n                \"Index\": 0,\n                \"Name\": \"Living Room\",\n                \"Type\": 0,\n                \"LiveTemp_oC\": 24.5,\n                \"UserSetpoint_oC\": 24.0,\n                \"UserEnabled\": true,\n                \"TemperatureAvailable\": true,\n                \"ControlAvailable\": true,\n                \"Master\": true,\n                \"LiveHumidity_pc\": 50.0\n            }\n        ],\n        \"LiveAircon\": {\n            \"Filter\": {\n                \"NeedsAttention\": false,\n                \"TimeToClean_days\": 30\n            },\n            \"CompressorMode\": \"COOL\",\n            \"CompressorState\": \"RUNNING\",\n            \"FanState\": \"RUNNING\",\n            \"Defrost\": false\n        },\n        \"UserAirconSettings\": {\n            \"isOn\": true,\n            \"Mode\": \"COOL\",\n            \"FanMode\": \"AUTO\",\n            \"TemperatureSetpoint_Cool_oC\": 24.0,\n            \"TemperatureSetpoint_Heat_oC\": 21.0,\n            \"EnabledZones\": [true, true, false, false, false, false, false, false],\n            \"AwayMode\": false,\n            \"QuietMode\": false\n        },\n        \"AirconSystem\": {\n            \"MasterSerial\": \"ABC123456\",\n            \"MasterWCFirmwareVersion\": \"1.2.3\",\n            \"IndoorUnit\": {\n                \"NV_ModelNumber\": \"NEO-12\"\n            }\n        },\n        \"Alerts\": {\n            \"CleanFilter\": false,\n            \"Defrosting\": false\n        }\n    }\n}\n</code></pre>"},{"location":"api/responses/#events-response","title":"Events Response","text":"<p>Response from <code>GET /api/v0/client/ac-systems/events/latest?serial={serial_number}</code>:</p> <pre><code>{\n    \"items\": [\n        {\n            \"id\": \"event_id_value\",\n            \"type\": \"status-change-broadcast\",\n            \"pairedUserId\": \"user_id_value\",\n            \"timestamp\": \"2023-09-01T12:00:00Z\",\n            \"data\": {\n                \"UserAirconSettings.isOn\": true,\n                \"UserAirconSettings.Mode\": \"COOL\",\n                \"RemoteZoneInfo[0].LiveTemp_oC\": 24.5,\n                \"@metadata\": {\n                    \"connectionId\": \"connection_id_value\",\n                    \"server\": \"server_value\"\n                }\n            }\n        }\n    ],\n    \"_links\": {\n        \"self\": {\n            \"href\": \"/api/v0/client/ac-systems/events/latest?serial=ABC123456\"\n        },\n        \"ac-newer-events\": {\n            \"href\": \"/api/v0/client/ac-systems/events/newer?serial=ABC123456&amp;newerThanEventId=event_id_value\",\n            \"title\": \"Get events newer than the current set\"\n        },\n        \"ac-older-events\": {\n            \"href\": \"/api/v0/client/ac-systems/events/older?serial=ABC123456&amp;olderThanEventId=event_id_value\",\n            \"title\": \"Get events older than the current set\"\n        }\n    }\n}\n</code></pre>"},{"location":"api/responses/#command-response","title":"Command Response","text":"<p>Response from <code>POST /api/v0/client/ac-systems/cmds/send?serial={serial_number}</code>:</p> <pre><code>{\n    \"result\": \"OK\",\n    \"message\": \"Command sent successfully\"\n}\n</code></pre>"},{"location":"api/responses/#parsing-responses","title":"Parsing Responses","text":"<p>The integration parses API responses to extract relevant data. Here's how different parts of the response are handled:</p>"},{"location":"api/responses/#parsing-system-status","title":"Parsing System Status","text":"<pre><code>def parse_system_status(response: Dict[str, Any]) -&gt; ActronNeoData:\n    \"\"\"Parse the system status response.\"\"\"\n    last_known_state = response.get(\"lastKnownState\", {})\n\n    # Parse main info\n    master_info = last_known_state.get(\"MasterInfo\", {})\n    user_settings = last_known_state.get(\"UserAirconSettings\", {})\n    live_aircon = last_known_state.get(\"LiveAircon\", {})\n\n    main_info = {\n        \"temperature\": master_info.get(\"LiveTemp_oC\", 0.0),\n        \"humidity\": master_info.get(\"LiveHumidity_pc\", 0.0),\n        \"is_on\": user_settings.get(\"isOn\", False),\n        \"mode\": user_settings.get(\"Mode\", \"OFF\"),\n        \"fan_mode\": user_settings.get(\"FanMode\", \"AUTO\"),\n        \"cool_setpoint\": user_settings.get(\"TemperatureSetpoint_Cool_oC\", 24.0),\n        \"heat_setpoint\": user_settings.get(\"TemperatureSetpoint_Heat_oC\", 21.0),\n        \"filter_status\": live_aircon.get(\"Filter\", {}).get(\"NeedsAttention\", False),\n        \"filter_days_remaining\": live_aircon.get(\"Filter\", {}).get(\"TimeToClean_days\", 0),\n        \"compressor_mode\": live_aircon.get(\"CompressorMode\", \"OFF\"),\n        \"compressor_state\": live_aircon.get(\"CompressorState\", \"OFF\"),\n        \"fan_state\": live_aircon.get(\"FanState\", \"OFF\"),\n        \"defrost_mode\": live_aircon.get(\"Defrost\", False),\n        \"away_mode\": user_settings.get(\"AwayMode\", False),\n        \"quiet_mode\": user_settings.get(\"QuietMode\", False)\n    }\n\n    # Parse zone info\n    zones = []\n    remote_zone_info = last_known_state.get(\"RemoteZoneInfo\", [])\n    enabled_zones = user_settings.get(\"EnabledZones\", [])\n\n    for zone in remote_zone_info:\n        index = zone.get(\"Index\", 0)\n        if index &lt; len(enabled_zones) and enabled_zones[index]:\n            zones.append({\n                \"index\": index,\n                \"name\": zone.get(\"Name\", f\"Zone {index}\"),\n                \"enabled\": True,\n                \"temperature\": zone.get(\"LiveTemp_oC\", 0.0),\n                \"humidity\": zone.get(\"LiveHumidity_pc\", 0.0),\n                \"setpoint\": zone.get(\"UserSetpoint_oC\", 0.0),\n                \"type\": str(zone.get(\"Type\", 0)),\n                \"temperature_available\": zone.get(\"TemperatureAvailable\", False),\n                \"control_available\": zone.get(\"ControlAvailable\", False),\n                \"is_master\": zone.get(\"Master\", False)\n            })\n\n    return ActronNeoData(main_info, zones, response)\n</code></pre>"},{"location":"api/responses/#parsing-events","title":"Parsing Events","text":"<pre><code>def parse_events(response: Dict[str, Any]) -&gt; List[Dict[str, Any]]:\n    \"\"\"Parse the events response.\"\"\"\n    events = []\n\n    for item in response.get(\"items\", []):\n        event = {\n            \"id\": item.get(\"id\", \"\"),\n            \"type\": item.get(\"type\", \"\"),\n            \"timestamp\": item.get(\"timestamp\", \"\"),\n            \"data\": item.get(\"data\", {})\n        }\n        events.append(event)\n\n    return events\n</code></pre>"},{"location":"api/responses/#error-handling","title":"Error Handling","text":"<p>The integration handles various error responses:</p> <pre><code>async def _authenticated_request(self, method: str, url: str, **kwargs) -&gt; Dict[str, Any]:\n    \"\"\"Make an authenticated request to the API.\"\"\"\n    try:\n        response = await self._session.request(method, url, **kwargs)\n\n        if response.status == 401:\n            # Authentication error\n            error_data = await response.json()\n            error = error_data.get(\"error\", \"\")\n            error_description = error_data.get(\"error_description\", \"\")\n\n            if error == \"invalid_token\":\n                # Try to refresh the token\n                if await self.refresh_token():\n                    # Retry the request with the new token\n                    return await self._authenticated_request(method, url, **kwargs)\n\n            raise ActronNeoAuthenticationError(f\"Authentication error: {error} - {error_description}\")\n\n        if response.status == 429:\n            # Rate limit exceeded\n            raise ActronNeoRateLimitError(\"Rate limit exceeded\")\n\n        if response.status != 200:\n            # Other API error\n            error_data = await response.json()\n            error_code = error_data.get(\"error\", {}).get(\"code\", \"unknown\")\n            error_message = error_data.get(\"error\", {}).get(\"message\", \"Unknown error\")\n\n            raise ActronNeoAPIError(f\"API error ({response.status}): {error_code} - {error_message}\")\n\n        return await response.json()\n\n    except aiohttp.ClientError as e:\n        # Network error\n        raise ActronNeoAPIError(f\"Network error: {str(e)}\")\n</code></pre>"},{"location":"api/responses/#response-transformation","title":"Response Transformation","text":"<p>The integration transforms API responses into a format that's easier to use in Home Assistant:</p>"},{"location":"api/responses/#main-data-structure","title":"Main Data Structure","text":"<pre><code>class ActronNeoData:\n    \"\"\"Class to hold data from ActronAir Neo API.\"\"\"\n\n    def __init__(\n        self,\n        main: ActronNeoMainInfo,\n        zones: List[ActronNeoZoneInfo],\n        raw_data: ActronNeoRawData\n    ) -&gt; None:\n        \"\"\"Initialize the data class.\"\"\"\n        self.main = main\n        self.zones = zones\n        self.raw_data = raw_data\n</code></pre>"},{"location":"api/responses/#entity-state-mapping","title":"Entity State Mapping","text":"<pre><code>@property\ndef hvac_mode(self) -&gt; str:\n    \"\"\"Return the current HVAC mode.\"\"\"\n    if not self.coordinator.data.main[\"is_on\"]:\n        return HVACMode.OFF\n\n    mode = self.coordinator.data.main[\"mode\"]\n    if mode == \"COOL\":\n        return HVACMode.COOL\n    elif mode == \"HEAT\":\n        return HVACMode.HEAT\n    elif mode == \"FAN\":\n        return HVACMode.FAN_ONLY\n    elif mode == \"AUTO\":\n        return HVACMode.AUTO\n\n    return HVACMode.OFF\n\n@property\ndef fan_mode(self) -&gt; str:\n    \"\"\"Return the fan mode.\"\"\"\n    fan_mode = self.coordinator.data.main[\"fan_mode\"]\n\n    if fan_mode == \"AUTO\":\n        return FAN_AUTO\n    elif fan_mode == \"LOW\" or fan_mode == \"LOW-CONT\":\n        return FAN_LOW\n    elif fan_mode == \"MED\" or fan_mode == \"MED-CONT\":\n        return FAN_MEDIUM\n    elif fan_mode == \"HIGH\" or fan_mode == \"HIGH-CONT\":\n        return FAN_HIGH\n\n    return FAN_AUTO\n</code></pre>"},{"location":"api/responses/#next-steps","title":"Next Steps","text":"<ul> <li>Authentication: Learn about the authentication process</li> <li>Commands: Learn how to send commands to the API</li> <li>Queries: Learn how to query data from the API</li> </ul>"},{"location":"developer/api_reference/","title":"API Reference","text":"<p>This document provides a detailed reference for the ActronAir Neo API client implementation in the integration.</p>"},{"location":"developer/api_reference/#api-client-overview","title":"API Client Overview","text":"<p>The API client (<code>api.py</code>) is responsible for all communication with the ActronAir Neo cloud API. It handles authentication, data retrieval, and command execution.</p>"},{"location":"developer/api_reference/#class-actronneoapi","title":"Class: <code>ActronNeoAPI</code>","text":"<p>The main API client class that handles all interactions with the ActronAir Neo cloud API.</p>"},{"location":"developer/api_reference/#initialization","title":"Initialization","text":"<pre><code>def __init__(\n    self,\n    username: str,\n    password: str,\n    session: Optional[aiohttp.ClientSession] = None,\n    request_timeout: int = 10,\n) -&gt; None:\n</code></pre> <p>Parameters: - <code>username</code> (str): ActronAir Neo account username - <code>password</code> (str): ActronAir Neo account password - <code>session</code> (Optional[aiohttp.ClientSession]): Optional aiohttp session for making requests - <code>request_timeout</code> (int): Timeout for API requests in seconds (default: 10)</p> <p>Example: <pre><code>from custom_components.actronair_neo.api import ActronNeoAPI\nimport aiohttp\n\nasync def setup_api():\n    session = aiohttp.ClientSession()\n    api = ActronNeoAPI(\n        username=\"your_username\",\n        password=\"your_password\",\n        session=session,\n        request_timeout=15\n    )\n    return api\n</code></pre></p>"},{"location":"developer/api_reference/#authentication-methods","title":"Authentication Methods","text":""},{"location":"developer/api_reference/#async-def-authenticateself-bool","title":"<code>async def authenticate(self) -&gt; bool</code>","text":"<p>Authenticates with the ActronAir Neo API using the provided credentials.</p> <p>Returns: - <code>bool</code>: True if authentication was successful, False otherwise</p> <p>Raises: - <code>ActronNeoAuthenticationError</code>: If authentication fails - <code>ActronNeoAPIError</code>: If there's an API error during authentication</p> <p>Example: <pre><code>try:\n    authenticated = await api.authenticate()\n    if authenticated:\n        print(\"Authentication successful\")\n    else:\n        print(\"Authentication failed\")\nexcept ActronNeoAuthenticationError as e:\n    print(f\"Authentication error: {e}\")\n</code></pre></p>"},{"location":"developer/api_reference/#async-def-refresh_tokenself-bool","title":"<code>async def refresh_token(self) -&gt; bool</code>","text":"<p>Refreshes the authentication token if it has expired.</p> <p>Returns: - <code>bool</code>: True if token refresh was successful, False otherwise</p> <p>Raises: - <code>ActronNeoAuthenticationError</code>: If token refresh fails - <code>ActronNeoAPIError</code>: If there's an API error during token refresh</p>"},{"location":"developer/api_reference/#data-retrieval-methods","title":"Data Retrieval Methods","text":""},{"location":"developer/api_reference/#async-def-get_devicesself-listactronneodeviceinfo","title":"<code>async def get_devices(self) -&gt; List[ActronNeoDeviceInfo]</code>","text":"<p>Retrieves a list of available ActronAir Neo devices associated with the account.</p> <p>Returns: - <code>List[ActronNeoDeviceInfo]</code>: List of device information objects</p> <p>Raises: - <code>ActronNeoAPIError</code>: If there's an API error during device retrieval - <code>ActronNeoAuthenticationError</code>: If authentication is required</p> <p>Example: <pre><code>try:\n    devices = await api.get_devices()\n    for device in devices:\n        print(f\"Device: {device['name']} (Serial: {device['serial']})\")\nexcept ActronNeoAPIError as e:\n    print(f\"API error: {e}\")\n</code></pre></p>"},{"location":"developer/api_reference/#async-def-get_system_statusself-device_id-str-dictstr-any","title":"<code>async def get_system_status(self, device_id: str) -&gt; Dict[str, Any]</code>","text":"<p>Retrieves the current status of a specific ActronAir Neo device.</p> <p>Parameters: - <code>device_id</code> (str): The serial number or ID of the device</p> <p>Returns: - <code>Dict[str, Any]</code>: Raw system status data</p> <p>Raises: - <code>ActronNeoAPIError</code>: If there's an API error during status retrieval - <code>ActronNeoAuthenticationError</code>: If authentication is required</p> <p>Example: <pre><code>try:\n    status = await api.get_system_status(\"ABC123456\")\n    print(f\"System is on: {status['UserAirconSettings']['isOn']}\")\n    print(f\"Current mode: {status['UserAirconSettings']['Mode']}\")\nexcept ActronNeoAPIError as e:\n    print(f\"API error: {e}\")\n</code></pre></p>"},{"location":"developer/api_reference/#async-def-get_system_eventsself-device_id-str-dictstr-any","title":"<code>async def get_system_events(self, device_id: str) -&gt; Dict[str, Any]</code>","text":"<p>Retrieves recent events for a specific ActronAir Neo device.</p> <p>Parameters: - <code>device_id</code> (str): The serial number or ID of the device</p> <p>Returns: - <code>Dict[str, Any]</code>: Raw system events data</p> <p>Raises: - <code>ActronNeoAPIError</code>: If there's an API error during events retrieval - <code>ActronNeoAuthenticationError</code>: If authentication is required</p>"},{"location":"developer/api_reference/#command-methods","title":"Command Methods","text":""},{"location":"developer/api_reference/#async-def-send_commandself-device_id-str-command-dictstr-any-bool","title":"<code>async def send_command(self, device_id: str, command: Dict[str, Any]) -&gt; bool</code>","text":"<p>Sends a command to a specific ActronAir Neo device.</p> <p>Parameters: - <code>device_id</code> (str): The serial number or ID of the device - <code>command</code> (Dict[str, Any]): The command to send</p> <p>Returns: - <code>bool</code>: True if the command was successful, False otherwise</p> <p>Raises: - <code>ActronNeoAPIError</code>: If there's an API error during command execution - <code>ActronNeoAuthenticationError</code>: If authentication is required</p> <p>Example: <pre><code>try:\n    # Turn on the system in cooling mode\n    command = {\n        \"UserAirconSettings.isOn\": True,\n        \"UserAirconSettings.Mode\": \"COOL\",\n        \"type\": \"set-settings\"\n    }\n    success = await api.send_command(\"ABC123456\", command)\n    if success:\n        print(\"Command sent successfully\")\n    else:\n        print(\"Command failed\")\nexcept ActronNeoAPIError as e:\n    print(f\"API error: {e}\")\n</code></pre></p>"},{"location":"developer/api_reference/#async-def-set_powerself-device_id-str-power_on-bool-bool","title":"<code>async def set_power(self, device_id: str, power_on: bool) -&gt; bool</code>","text":"<p>Turns a specific ActronAir Neo device on or off.</p> <p>Parameters: - <code>device_id</code> (str): The serial number or ID of the device - <code>power_on</code> (bool): True to turn on, False to turn off</p> <p>Returns: - <code>bool</code>: True if the command was successful, False otherwise</p> <p>Raises: - <code>ActronNeoAPIError</code>: If there's an API error during command execution - <code>ActronNeoAuthenticationError</code>: If authentication is required</p>"},{"location":"developer/api_reference/#async-def-set_modeself-device_id-str-mode-str-bool","title":"<code>async def set_mode(self, device_id: str, mode: str) -&gt; bool</code>","text":"<p>Sets the operating mode of a specific ActronAir Neo device.</p> <p>Parameters: - <code>device_id</code> (str): The serial number or ID of the device - <code>mode</code> (str): The mode to set (\"COOL\", \"HEAT\", \"FAN\", \"AUTO\")</p> <p>Returns: - <code>bool</code>: True if the command was successful, False otherwise</p> <p>Raises: - <code>ActronNeoAPIError</code>: If there's an API error during command execution - <code>ActronNeoAuthenticationError</code>: If authentication is required - <code>ValueError</code>: If the mode is invalid</p>"},{"location":"developer/api_reference/#async-def-set_temperatureself-device_id-str-temperature-float-mode-str-bool","title":"<code>async def set_temperature(self, device_id: str, temperature: float, mode: str) -&gt; bool</code>","text":"<p>Sets the target temperature of a specific ActronAir Neo device.</p> <p>Parameters: - <code>device_id</code> (str): The serial number or ID of the device - <code>temperature</code> (float): The target temperature in degrees Celsius - <code>mode</code> (str): The mode (\"COOL\", \"HEAT\", \"AUTO\")</p> <p>Returns: - <code>bool</code>: True if the command was successful, False otherwise</p> <p>Raises: - <code>ActronNeoAPIError</code>: If there's an API error during command execution - <code>ActronNeoAuthenticationError</code>: If authentication is required - <code>ValueError</code>: If the temperature is out of range or the mode is invalid</p>"},{"location":"developer/api_reference/#async-def-set_fan_modeself-device_id-str-fan_mode-str-bool","title":"<code>async def set_fan_mode(self, device_id: str, fan_mode: str) -&gt; bool</code>","text":"<p>Sets the fan mode of a specific ActronAir Neo device.</p> <p>Parameters: - <code>device_id</code> (str): The serial number or ID of the device - <code>fan_mode</code> (str): The fan mode to set (\"LOW\", \"MED\", \"HIGH\", \"AUTO\", etc.)</p> <p>Returns: - <code>bool</code>: True if the command was successful, False otherwise</p> <p>Raises: - <code>ActronNeoAPIError</code>: If there's an API error during command execution - <code>ActronNeoAuthenticationError</code>: If authentication is required - <code>ValueError</code>: If the fan mode is invalid</p>"},{"location":"developer/api_reference/#async-def-set_zone_stateself-device_id-str-zone_index-int-enabled-bool-bool","title":"<code>async def set_zone_state(self, device_id: str, zone_index: int, enabled: bool) -&gt; bool</code>","text":"<p>Enables or disables a specific zone on an ActronAir Neo device.</p> <p>Parameters: - <code>device_id</code> (str): The serial number or ID of the device - <code>zone_index</code> (int): The index of the zone (0-7) - <code>enabled</code> (bool): True to enable the zone, False to disable it</p> <p>Returns: - <code>bool</code>: True if the command was successful, False otherwise</p> <p>Raises: - <code>ActronNeoAPIError</code>: If there's an API error during command execution - <code>ActronNeoAuthenticationError</code>: If authentication is required - <code>ValueError</code>: If the zone index is out of range</p>"},{"location":"developer/api_reference/#utility-methods","title":"Utility Methods","text":""},{"location":"developer/api_reference/#def-validate_modeself-mode-str-str","title":"<code>def validate_mode(self, mode: str) -&gt; str</code>","text":"<p>Validates and normalizes an operating mode.</p> <p>Parameters: - <code>mode</code> (str): The mode to validate</p> <p>Returns: - <code>str</code>: The validated mode</p> <p>Raises: - <code>ValueError</code>: If the mode is invalid</p>"},{"location":"developer/api_reference/#def-validate_fan_modeself-fan_mode-str-continuous-bool-false-str","title":"<code>def validate_fan_mode(self, fan_mode: str, continuous: bool = False) -&gt; str</code>","text":"<p>Validates and normalizes a fan mode.</p> <p>Parameters: - <code>fan_mode</code> (str): The fan mode to validate - <code>continuous</code> (bool): Whether to set continuous fan operation</p> <p>Returns: - <code>str</code>: The validated fan mode</p> <p>Raises: - <code>ValueError</code>: If the fan mode is invalid or continuous is not supported for the mode</p>"},{"location":"developer/api_reference/#async-def-is_api_healthyself-bool","title":"<code>async def is_api_healthy(self) -&gt; bool</code>","text":"<p>Checks if the API is healthy and accessible.</p> <p>Returns: - <code>bool</code>: True if the API is healthy, False otherwise</p>"},{"location":"developer/api_reference/#exception-classes","title":"Exception Classes","text":""},{"location":"developer/api_reference/#actronneoapierror","title":"<code>ActronNeoAPIError</code>","text":"<p>Base exception class for all API-related errors.</p> <pre><code>class ActronNeoAPIError(Exception):\n    \"\"\"Exception raised for errors in the ActronAir Neo API.\"\"\"\n    pass\n</code></pre>"},{"location":"developer/api_reference/#actronneoauthenticationerror","title":"<code>ActronNeoAuthenticationError</code>","text":"<p>Exception raised for authentication errors.</p> <pre><code>class ActronNeoAuthenticationError(ActronNeoAPIError):\n    \"\"\"Exception raised for authentication errors.\"\"\"\n    pass\n</code></pre>"},{"location":"developer/api_reference/#actronneoratelimiterror","title":"<code>ActronNeoRateLimitError</code>","text":"<p>Exception raised when API rate limits are exceeded.</p> <pre><code>class ActronNeoRateLimitError(ActronNeoAPIError):\n    \"\"\"Exception raised when API rate limits are exceeded.\"\"\"\n    pass\n</code></pre>"},{"location":"developer/api_reference/#type-definitions","title":"Type Definitions","text":"<p>The API client uses several type definitions from <code>types.py</code>:</p>"},{"location":"developer/api_reference/#actronneodeviceinfo","title":"<code>ActronNeoDeviceInfo</code>","text":"<pre><code>class ActronNeoDeviceInfo(TypedDict):\n    \"\"\"Type for ActronAir Neo device information.\"\"\"\n    serial: str\n    name: str\n    type: str\n    id: str\n</code></pre>"},{"location":"developer/api_reference/#actronneorawdata","title":"<code>ActronNeoRawData</code>","text":"<pre><code>class ActronNeoRawData(TypedDict):\n    \"\"\"Type for raw ActronAir Neo API response data.\"\"\"\n    lastKnownState: Dict[str, Any]\n</code></pre>"},{"location":"developer/api_reference/#rate-limiting","title":"Rate Limiting","text":"<p>The API client implements rate limiting to prevent exceeding the ActronAir Neo API's rate limits:</p> <pre><code>self._rate_limiter = asyncio.Semaphore(5)  # Limit to 5 concurrent requests\n</code></pre> <p>All API requests are wrapped with this rate limiter to ensure compliance with API limits.</p>"},{"location":"developer/api_reference/#best-practices","title":"Best Practices","text":"<p>When using the API client:</p> <ol> <li>Reuse the API instance to benefit from token caching</li> <li>Handle exceptions appropriately to provide a good user experience</li> <li>Implement backoff strategies for retrying failed requests</li> <li>Close the session when done to free resources</li> </ol> <pre><code>try:\n    # Use the API\n    await api.authenticate()\n    devices = await api.get_devices()\nexcept ActronNeoAuthenticationError:\n    # Handle authentication errors\n    print(\"Authentication failed. Check credentials.\")\nexcept ActronNeoRateLimitError:\n    # Handle rate limit errors\n    print(\"Rate limit exceeded. Try again later.\")\nexcept ActronNeoAPIError as e:\n    # Handle other API errors\n    print(f\"API error: {e}\")\nfinally:\n    # Clean up\n    if session and not session.closed:\n        await session.close()\n</code></pre>"},{"location":"developer/api_reference/#next-steps","title":"Next Steps","text":"<ul> <li>Architecture Overview: Understand how the API client fits into the overall architecture</li> <li>Testing Guide: Learn how to test the API client</li> </ul>"},{"location":"developer/architecture/","title":"Architecture Overview","text":"<p>This document provides a comprehensive overview of the ActronAir Neo integration architecture, explaining how the different components work together.</p>"},{"location":"developer/architecture/#high-level-architecture","title":"High-Level Architecture","text":"<p>The ActronAir Neo integration follows a layered architecture pattern:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  Home Assistant Core                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 ActronAir Neo Integration                \u2502\n\u2502                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502   Config    \u2502    \u2502             \u2502    \u2502  Entities   \u2502  \u2502\n\u2502  \u2502    Flow     \u2502\u25c4\u2500\u2500\u25ba\u2502 Coordinator \u2502\u25c4\u2500\u2500\u25ba\u2502 (Climate,   \u2502  \u2502\n\u2502  \u2502             \u2502    \u2502             \u2502    \u2502  Sensors)   \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                            \u2502                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502                    API Client                     \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                            \u2502                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  ActronAir Neo Cloud API                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"developer/architecture/#core-components","title":"Core Components","text":""},{"location":"developer/architecture/#1-api-client-apipy","title":"1. API Client (<code>api.py</code>)","text":"<p>The API client is responsible for all communication with the ActronAir Neo cloud API. It handles:</p> <ul> <li>Authentication and token management</li> <li>API requests and responses</li> <li>Rate limiting</li> <li>Error handling</li> <li>Data parsing and validation</li> </ul> <p>The API client is designed to be a standalone component that could potentially be used outside of the Home Assistant integration.</p> <p>Key classes: - <code>ActronNeoAPI</code>: Main API client class - <code>ActronNeoAuthenticationError</code>: Custom exception for authentication issues - <code>ActronNeoAPIError</code>: Custom exception for API errors</p>"},{"location":"developer/architecture/#2-data-coordinator-coordinatorpy","title":"2. Data Coordinator (<code>coordinator.py</code>)","text":"<p>The coordinator is the central component that manages data flow between the API and the entities. It:</p> <ul> <li>Periodically fetches data from the API</li> <li>Processes and structures the data</li> <li>Provides a consistent interface for entities to access data</li> <li>Handles command execution</li> <li>Manages error recovery</li> </ul> <p>The coordinator uses Home Assistant's <code>DataUpdateCoordinator</code> class to efficiently manage data updates and minimize API calls.</p> <p>Key classes: - <code>ActronDataCoordinator</code>: Main coordinator class - <code>ActronNeoData</code>: Data structure class</p>"},{"location":"developer/architecture/#3-config-flow-config_flowpy","title":"3. Config Flow (<code>config_flow.py</code>)","text":"<p>The config flow handles the integration setup and configuration process. It:</p> <ul> <li>Manages the UI for adding and configuring the integration</li> <li>Validates user input</li> <li>Handles authentication with the API</li> <li>Discovers available devices</li> <li>Stores configuration data</li> </ul> <p>Key classes: - <code>ActronNeoConfigFlow</code>: Main config flow class - <code>ActronNeoOptionsFlow</code>: Options flow for reconfiguration</p>"},{"location":"developer/architecture/#4-entities","title":"4. Entities","text":"<p>The entities represent the different devices and sensors in Home Assistant:</p> <ul> <li>Climate Entity (<code>climate.py</code>): Controls the air conditioning system</li> <li>Sensor Entities (<code>sensor.py</code>): Provides temperature, humidity, and other readings</li> <li>Binary Sensor Entities (<code>binary_sensor.py</code>): Provides status information</li> <li>Switch Entities (<code>switch.py</code>): Controls zones and other toggleable features</li> </ul> <p>All entities inherit from a base entity class that provides common functionality.</p> <p>Key classes: - <code>ActronNeoClimate</code>: Main climate control entity - <code>ActronNeoBaseSensor</code>: Base class for all sensor entities - <code>ActronNeoZoneSwitch</code>: Zone control switch entity</p>"},{"location":"developer/architecture/#data-flow","title":"Data Flow","text":""},{"location":"developer/architecture/#initialization-flow","title":"Initialization Flow","text":"<ol> <li>User adds the integration through the Home Assistant UI</li> <li>Config flow collects credentials and configuration options</li> <li>Config flow validates credentials with the API</li> <li>Config flow discovers available devices</li> <li>Home Assistant creates the coordinator instance</li> <li>Coordinator performs initial data fetch</li> <li>Home Assistant creates entity instances</li> <li>Entities register with Home Assistant</li> </ol>"},{"location":"developer/architecture/#update-flow","title":"Update Flow","text":"<ol> <li>Coordinator's update interval triggers</li> <li>Coordinator requests data from the API</li> <li>API client fetches data from the ActronAir Neo cloud</li> <li>API client processes and returns the data</li> <li>Coordinator updates its internal data store</li> <li>Coordinator notifies entities of the update</li> <li>Entities refresh their state based on the new data</li> </ol>"},{"location":"developer/architecture/#command-flow","title":"Command Flow","text":"<ol> <li>User interacts with an entity in Home Assistant</li> <li>Entity calls the appropriate method on the coordinator</li> <li>Coordinator validates the command</li> <li>Coordinator calls the API client with the command</li> <li>API client sends the command to the ActronAir Neo cloud</li> <li>API client receives and processes the response</li> <li>Coordinator updates its internal data store</li> <li>Entities refresh their state based on the new data</li> </ol>"},{"location":"developer/architecture/#type-system","title":"Type System","text":"<p>The integration uses Python's type hints throughout the codebase to ensure type safety and improve code quality. Key type definitions are in <code>types.py</code>:</p> <ul> <li><code>ActronNeoDeviceInfo</code>: Type for device information</li> <li><code>ActronNeoZoneInfo</code>: Type for zone information</li> <li><code>ActronNeoMainInfo</code>: Type for main system information</li> <li><code>ActronNeoRawData</code>: Type for raw API response data</li> </ul>"},{"location":"developer/architecture/#error-handling","title":"Error Handling","text":"<p>The integration implements a robust error handling strategy:</p> <ol> <li>API-level errors are caught and converted to specific exceptions</li> <li>Coordinator-level errors are logged and handled with exponential backoff</li> <li>Entity-level errors are caught to prevent cascading failures</li> </ol>"},{"location":"developer/architecture/#configuration-storage","title":"Configuration Storage","text":"<p>The integration stores configuration in Home Assistant's configuration registry:</p> <ul> <li>Authentication credentials are stored securely</li> <li>Device information is stored for quick startup</li> <li>User preferences are stored for persistence across restarts</li> </ul>"},{"location":"developer/architecture/#next-steps","title":"Next Steps","text":"<ul> <li>API Reference: Detailed documentation of the API client</li> <li>Contributing Guide: How to contribute to the integration</li> <li>Testing Guide: How to test the integration</li> </ul>"},{"location":"developer/contributing/","title":"Contributing Guide","text":"<p>Thank you for your interest in contributing to the ActronAir Neo integration for Home Assistant! This guide will help you get started with contributing to the project.</p>"},{"location":"developer/contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>Getting Started</li> <li>Development Environment</li> <li>Development Workflow</li> <li>Code Style and Guidelines</li> <li>Testing</li> <li>Documentation</li> <li>Submitting Changes</li> <li>Release Process</li> </ul>"},{"location":"developer/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project adheres to the Home Assistant Community Guidelines. By participating, you are expected to uphold this code. Please report unacceptable behavior to the project maintainers.</p>"},{"location":"developer/contributing/#getting-started","title":"Getting Started","text":""},{"location":"developer/contributing/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed: - Python 3.10 or newer - Git - A text editor or IDE (VS Code recommended) - Home Assistant development environment (optional but recommended)</p>"},{"location":"developer/contributing/#fork-and-clone-the-repository","title":"Fork and Clone the Repository","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/YOUR_USERNAME/ha-actronair-neo.git\ncd ha-actronair-neo\n</code></pre></li> <li>Add the upstream repository as a remote:    <pre><code>git remote add upstream https://github.com/domalab/ha-actronair-neo.git\n</code></pre></li> </ol>"},{"location":"developer/contributing/#development-environment","title":"Development Environment","text":""},{"location":"developer/contributing/#setting-up-a-virtual-environment","title":"Setting Up a Virtual Environment","text":"<ol> <li> <p>Create a virtual environment:    <pre><code>python -m venv venv\n</code></pre></p> </li> <li> <p>Activate the virtual environment:</p> </li> <li>On Windows:      <pre><code>venv\\Scripts\\activate\n</code></pre></li> <li> <p>On macOS/Linux:      <pre><code>source venv/bin/activate\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pip install -r requirements.txt\npip install -r requirements_dev.txt\n</code></pre></p> </li> </ol>"},{"location":"developer/contributing/#installing-development-tools","title":"Installing Development Tools","text":"<p>Install the development tools: <pre><code>pip install black flake8 pylint mypy pytest pytest-asyncio pytest-cov\n</code></pre></p>"},{"location":"developer/contributing/#setting-up-pre-commit-hooks","title":"Setting Up Pre-commit Hooks","text":"<p>We use pre-commit hooks to ensure code quality. Install and set up pre-commit: <pre><code>pip install pre-commit\npre-commit install\n</code></pre></p>"},{"location":"developer/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"developer/contributing/#creating-a-branch","title":"Creating a Branch","text":"<p>Create a new branch for your changes: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> <p>Use a descriptive branch name that reflects the changes you're making.</p>"},{"location":"developer/contributing/#making-changes","title":"Making Changes","text":"<ol> <li>Make your changes to the codebase</li> <li>Run tests to ensure your changes don't break existing functionality:    <pre><code>pytest\n</code></pre></li> <li>Run linting and type checking:    <pre><code>black .\nflake8\nmypy .\n</code></pre></li> </ol>"},{"location":"developer/contributing/#keeping-your-branch-updated","title":"Keeping Your Branch Updated","text":"<p>Regularly update your branch with changes from upstream: <pre><code>git fetch upstream\ngit rebase upstream/main\n</code></pre></p>"},{"location":"developer/contributing/#code-style-and-guidelines","title":"Code Style and Guidelines","text":""},{"location":"developer/contributing/#python-style-guide","title":"Python Style Guide","text":"<p>This project follows the Black code style. All code should be formatted using Black.</p>"},{"location":"developer/contributing/#type-annotations","title":"Type Annotations","text":"<p>All new code should include type annotations. We use mypy for type checking.</p> <p>Example: <pre><code>def get_temperature(sensor_id: str) -&gt; float:\n    \"\"\"Get the temperature from a sensor.\n\n    Args:\n        sensor_id: The ID of the sensor\n\n    Returns:\n        The temperature in degrees Celsius\n    \"\"\"\n    # Implementation\n    return 21.5\n</code></pre></p>"},{"location":"developer/contributing/#docstrings","title":"Docstrings","text":"<p>All public functions, classes, and methods should have docstrings. We follow the Google docstring style.</p> <p>Example: <pre><code>def set_temperature(device_id: str, temperature: float) -&gt; bool:\n    \"\"\"Set the target temperature for a device.\n\n    Args:\n        device_id: The ID of the device\n        temperature: The target temperature in degrees Celsius\n\n    Returns:\n        True if successful, False otherwise\n\n    Raises:\n        ValueError: If the temperature is out of range\n    \"\"\"\n    # Implementation\n    return True\n</code></pre></p>"},{"location":"developer/contributing/#imports","title":"Imports","text":"<p>Organize imports in the following order: 1. Standard library imports 2. Related third-party imports 3. Local application/library specific imports</p> <p>Use absolute imports for clarity.</p>"},{"location":"developer/contributing/#constants","title":"Constants","text":"<p>Constants should be defined at the module level and named in ALL_CAPS.</p> <p>Example: <pre><code>DEFAULT_TIMEOUT = 10\nMAX_TEMPERATURE = 30.0\nMIN_TEMPERATURE = 16.0\n</code></pre></p>"},{"location":"developer/contributing/#testing","title":"Testing","text":""},{"location":"developer/contributing/#running-tests","title":"Running Tests","text":"<p>Run the test suite with pytest: <pre><code>pytest\n</code></pre></p> <p>Run tests with coverage: <pre><code>pytest --cov=custom_components.actronair_neo\n</code></pre></p>"},{"location":"developer/contributing/#writing-tests","title":"Writing Tests","text":"<ul> <li>All new features should include tests</li> <li>Tests should be placed in the <code>tests/</code> directory</li> <li>Test files should be named <code>test_*.py</code></li> <li>Use pytest fixtures for common setup</li> <li>Mock external dependencies</li> </ul> <p>Example test: <pre><code>import pytest\nfrom unittest.mock import patch, MagicMock\n\nfrom custom_components.actronair_neo.api import ActronNeoAPI\n\n@pytest.mark.asyncio\nasync def test_authenticate_success():\n    \"\"\"Test successful authentication.\"\"\"\n    # Arrange\n    mock_session = MagicMock()\n    mock_response = MagicMock()\n    mock_response.status = 200\n    mock_response.json.return_value = {\n        \"access_token\": \"test_token\",\n        \"token_type\": \"bearer\",\n        \"expires_in\": 3600\n    }\n    mock_session.post.return_value.__aenter__.return_value = mock_response\n\n    api = ActronNeoAPI(\"test_user\", \"test_pass\", session=mock_session)\n\n    # Act\n    result = await api.authenticate()\n\n    # Assert\n    assert result is True\n    assert api._access_token == \"test_token\"\n    assert api._token_type == \"bearer\"\n</code></pre></p>"},{"location":"developer/contributing/#documentation","title":"Documentation","text":""},{"location":"developer/contributing/#updating-documentation","title":"Updating Documentation","text":"<p>When making changes, update the relevant documentation: - Update docstrings for any modified code - Update the README.md if necessary - Update or add documentation in the docs/ directory</p>"},{"location":"developer/contributing/#building-documentation","title":"Building Documentation","text":"<p>If using Sphinx for documentation: <pre><code>cd docs\nmake html\n</code></pre></p>"},{"location":"developer/contributing/#submitting-changes","title":"Submitting Changes","text":""},{"location":"developer/contributing/#committing-changes","title":"Committing Changes","text":"<p>Make small, focused commits with clear messages: <pre><code>git add .\ngit commit -m \"Add feature: detailed description of the change\"\n</code></pre></p>"},{"location":"developer/contributing/#creating-a-pull-request","title":"Creating a Pull Request","text":"<ol> <li> <p>Push your branch to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Go to the original repository and create a pull request</p> </li> <li> <p>Fill in the pull request template with:</p> </li> <li>A clear title</li> <li>A description of the changes</li> <li>Any related issues</li> <li>Screenshots if applicable</li> </ol>"},{"location":"developer/contributing/#code-review-process","title":"Code Review Process","text":"<p>All pull requests will be reviewed by the maintainers. You may be asked to make changes before your pull request is merged.</p>"},{"location":"developer/contributing/#release-process","title":"Release Process","text":""},{"location":"developer/contributing/#versioning","title":"Versioning","text":"<p>This project follows Semantic Versioning: - MAJOR version for incompatible API changes - MINOR version for new functionality in a backward-compatible manner - PATCH version for backward-compatible bug fixes</p>"},{"location":"developer/contributing/#changelog","title":"Changelog","text":"<p>Update the CHANGELOG.md file with your changes under the \"Unreleased\" section.</p>"},{"location":"developer/contributing/#release-checklist","title":"Release Checklist","text":"<p>Before a release: - Ensure all tests pass - Update the version number in <code>manifest.json</code> - Update the CHANGELOG.md - Create a new release on GitHub</p>"},{"location":"developer/contributing/#thank-you","title":"Thank You!","text":"<p>Your contributions help make this integration better for everyone. Thank you for your time and effort!</p>"},{"location":"developer/testing/","title":"Testing Guide","text":"<p>This guide explains how to test the ActronAir Neo integration, both manually and automatically.</p>"},{"location":"developer/testing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Test Structure</li> <li>Running Tests</li> <li>Writing Tests</li> <li>Test Coverage</li> <li>Continuous Integration</li> <li>Manual Testing</li> </ul>"},{"location":"developer/testing/#test-structure","title":"Test Structure","text":"<p>The tests for the ActronAir Neo integration are organized in the <code>tests/</code> directory with the following structure:</p> <pre><code>tests/\n\u251c\u2500\u2500 conftest.py                 # Common test fixtures\n\u251c\u2500\u2500 test_api/                   # API client tests\n\u2502   \u251c\u2500\u2500 test_api.py             # Tests for the API client\n\u2502   \u2514\u2500\u2500 test_auth.py            # Tests for authentication\n\u251c\u2500\u2500 test_config_flow/           # Config flow tests\n\u2502   \u2514\u2500\u2500 test_config_flow.py     # Tests for the config flow\n\u251c\u2500\u2500 test_coordinator/           # Coordinator tests\n\u2502   \u2514\u2500\u2500 test_coordinator.py     # Tests for the data coordinator\n\u251c\u2500\u2500 test_climate/               # Climate entity tests\n\u2502   \u2514\u2500\u2500 test_climate.py         # Tests for the climate entity\n\u251c\u2500\u2500 test_sensor/                # Sensor entity tests\n\u2502   \u2514\u2500\u2500 test_sensor.py          # Tests for sensor entities\n\u2514\u2500\u2500 test_init.py                # Integration initialization tests\n</code></pre>"},{"location":"developer/testing/#running-tests","title":"Running Tests","text":""},{"location":"developer/testing/#prerequisites","title":"Prerequisites","text":"<p>Before running tests, ensure you have the testing dependencies installed:</p> <pre><code>pip install pytest pytest-asyncio pytest-cov\n</code></pre>"},{"location":"developer/testing/#running-all-tests","title":"Running All Tests","text":"<p>To run all tests:</p> <pre><code>pytest\n</code></pre>"},{"location":"developer/testing/#running-specific-test-files","title":"Running Specific Test Files","text":"<p>To run tests in a specific file:</p> <pre><code>pytest tests/test_api/test_api.py\n</code></pre>"},{"location":"developer/testing/#running-specific-test-functions","title":"Running Specific Test Functions","text":"<p>To run a specific test function:</p> <pre><code>pytest tests/test_api/test_api.py::test_authenticate_success\n</code></pre>"},{"location":"developer/testing/#running-tests-with-coverage","title":"Running Tests with Coverage","text":"<p>To run tests with coverage reporting:</p> <pre><code>pytest --cov=custom_components.actronair_neo\n</code></pre> <p>For a more detailed coverage report:</p> <pre><code>pytest --cov=custom_components.actronair_neo --cov-report=term-missing\n</code></pre> <p>To generate an HTML coverage report:</p> <pre><code>pytest --cov=custom_components.actronair_neo --cov-report=html\n</code></pre> <p>This will create a <code>htmlcov</code> directory with the coverage report.</p>"},{"location":"developer/testing/#writing-tests","title":"Writing Tests","text":""},{"location":"developer/testing/#test-fixtures","title":"Test Fixtures","text":"<p>Common test fixtures are defined in <code>tests/conftest.py</code>. These fixtures provide mock objects and data for tests.</p> <p>Example fixtures:</p> <pre><code>import pytest\nfrom unittest.mock import MagicMock, patch\n\n@pytest.fixture\ndef mock_api():\n    \"\"\"Provide a mock ActronNeoAPI instance.\"\"\"\n    api = MagicMock()\n    api.authenticate.return_value = True\n    api.get_devices.return_value = [\n        {\"serial\": \"ABC123\", \"name\": \"Living Room AC\", \"type\": \"Neo\", \"id\": \"1\"}\n    ]\n    return api\n\n@pytest.fixture\ndef mock_ac_status_response():\n    \"\"\"Provide a mock AC status response.\"\"\"\n    return {\n        \"lastKnownState\": {\n            \"UserAirconSettings\": {\n                \"isOn\": True,\n                \"Mode\": \"COOL\",\n                \"FanMode\": \"AUTO\",\n                \"TemperatureSetpoint_Cool_oC\": 24.0,\n                \"TemperatureSetpoint_Heat_oC\": 21.0,\n                \"EnabledZones\": [True, True, False, False, False, False, False, False]\n            },\n            \"MasterInfo\": {\n                \"LiveTemp_oC\": 25.5,\n                \"LiveHumidity_pc\": 50.0\n            }\n        }\n    }\n</code></pre>"},{"location":"developer/testing/#testing-api-client","title":"Testing API Client","text":"<p>When testing the API client, mock the HTTP responses to avoid making actual API calls:</p> <pre><code>import pytest\nfrom unittest.mock import patch, MagicMock\nfrom aiohttp import ClientResponseError\n\nfrom custom_components.actronair_neo.api import ActronNeoAPI, ActronNeoAuthenticationError\n\n@pytest.mark.asyncio\nasync def test_authenticate_success():\n    \"\"\"Test successful authentication.\"\"\"\n    # Arrange\n    mock_session = MagicMock()\n    mock_response = MagicMock()\n    mock_response.status = 200\n    mock_response.json.return_value = {\n        \"access_token\": \"test_token\",\n        \"token_type\": \"bearer\",\n        \"expires_in\": 3600\n    }\n    mock_session.post.return_value.__aenter__.return_value = mock_response\n\n    api = ActronNeoAPI(\"test_user\", \"test_pass\", session=mock_session)\n\n    # Act\n    result = await api.authenticate()\n\n    # Assert\n    assert result is True\n    assert api._access_token == \"test_token\"\n    assert api._token_type == \"bearer\"\n\n@pytest.mark.asyncio\nasync def test_authenticate_failure():\n    \"\"\"Test authentication failure.\"\"\"\n    # Arrange\n    mock_session = MagicMock()\n    mock_response = MagicMock()\n    mock_response.status = 401\n    mock_response.json.return_value = {\n        \"error\": \"invalid_grant\",\n        \"error_description\": \"The user credentials are incorrect.\"\n    }\n    mock_session.post.return_value.__aenter__.return_value = mock_response\n\n    api = ActronNeoAPI(\"test_user\", \"wrong_pass\", session=mock_session)\n\n    # Act &amp; Assert\n    with pytest.raises(ActronNeoAuthenticationError):\n        await api.authenticate()\n</code></pre>"},{"location":"developer/testing/#testing-coordinator","title":"Testing Coordinator","text":"<p>When testing the coordinator, mock the API client:</p> <pre><code>import pytest\nfrom unittest.mock import patch, MagicMock\n\nfrom custom_components.actronair_neo.coordinator import ActronDataCoordinator\n\n@pytest.mark.asyncio\nasync def test_coordinator_update(mock_api, mock_ac_status_response, hass):\n    \"\"\"Test coordinator update method.\"\"\"\n    # Arrange\n    mock_api.get_system_status.return_value = mock_ac_status_response\n\n    coordinator = ActronDataCoordinator(\n        hass=hass,\n        api=mock_api,\n        device_id=\"ABC123\",\n        update_interval=60,\n        enable_zone_control=True\n    )\n\n    # Act\n    await coordinator._async_update_data()\n\n    # Assert\n    assert coordinator.data is not None\n    assert coordinator.data.main[\"temperature\"] == 25.5\n    assert coordinator.data.main[\"humidity\"] == 50.0\n    assert coordinator.data.main[\"is_on\"] is True\n    assert coordinator.data.main[\"mode\"] == \"COOL\"\n    assert len(coordinator.data.zones) == 2  # Only enabled zones\n</code></pre>"},{"location":"developer/testing/#testing-entities","title":"Testing Entities","text":"<p>When testing entities, mock the coordinator:</p> <pre><code>import pytest\nfrom unittest.mock import patch, MagicMock\n\nfrom custom_components.actronair_neo.climate import ActronNeoClimate\n\n@pytest.mark.asyncio\nasync def test_climate_state(hass, mock_coordinator):\n    \"\"\"Test climate entity state.\"\"\"\n    # Arrange\n    entity = ActronNeoClimate(mock_coordinator, \"climate.actronair_neo\")\n\n    # Act\n    await entity.async_update()\n\n    # Assert\n    assert entity.state == \"cool\"\n    assert entity.current_temperature == 25.5\n    assert entity.target_temperature == 24.0\n    assert entity.hvac_modes == [\"off\", \"cool\", \"heat\", \"fan_only\", \"auto\"]\n    assert entity.fan_modes == [\"auto\", \"low\", \"medium\", \"high\"]\n</code></pre>"},{"location":"developer/testing/#testing-config-flow","title":"Testing Config Flow","text":"<p>When testing the config flow, mock the API client and use the <code>hass</code> fixture:</p> <pre><code>import pytest\nfrom unittest.mock import patch, MagicMock\n\nfrom homeassistant.config_entries import ConfigEntryState\nfrom homeassistant.data_entry_flow import FlowResultType\n\nfrom custom_components.actronair_neo.config_flow import ActronNeoConfigFlow\n\nasync def test_config_flow_complete(hass, mock_api):\n    \"\"\"Test a complete config flow.\"\"\"\n    # Arrange\n    result = await hass.config_entries.flow.async_init(\n        \"actronair_neo\", context={\"source\": \"user\"}\n    )\n\n    # Act - Step 1: Show form\n    assert result[\"type\"] == FlowResultType.FORM\n    assert result[\"step_id\"] == \"user\"\n\n    # Act - Step 2: Submit credentials\n    with patch(\n        \"custom_components.actronair_neo.config_flow.ActronNeoAPI\",\n        return_value=mock_api,\n    ):\n        result = await hass.config_entries.flow.async_configure(\n            result[\"flow_id\"],\n            {\n                \"username\": \"test_user\",\n                \"password\": \"test_pass\",\n                \"update_interval\": 60,\n                \"enable_zone_control\": True,\n            },\n        )\n\n    # Assert\n    assert result[\"type\"] == FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == \"ActronAir Neo\"\n    assert result[\"data\"] == {\n        \"username\": \"test_user\",\n        \"password\": \"test_pass\",\n        \"device_id\": \"ABC123\",\n        \"update_interval\": 60,\n        \"enable_zone_control\": True,\n    }\n</code></pre>"},{"location":"developer/testing/#test-coverage","title":"Test Coverage","text":"<p>Aim for high test coverage, especially for critical components like the API client and coordinator. Use the coverage reports to identify areas that need more testing.</p>"},{"location":"developer/testing/#coverage-targets","title":"Coverage Targets","text":"<ul> <li>API Client: 90%+ coverage</li> <li>Coordinator: 90%+ coverage</li> <li>Config Flow: 90%+ coverage</li> <li>Entities: 80%+ coverage</li> <li>Overall: 85%+ coverage</li> </ul>"},{"location":"developer/testing/#continuous-integration","title":"Continuous Integration","text":"<p>The integration uses GitHub Actions for continuous integration. The CI pipeline runs tests automatically on every push and pull request.</p>"},{"location":"developer/testing/#ci-workflow","title":"CI Workflow","text":"<p>The CI workflow is defined in <code>.github/workflows/tests.yml</code> and includes:</p> <ol> <li>Running tests with pytest</li> <li>Checking code coverage</li> <li>Running linters (flake8, black)</li> <li>Running type checking (mypy)</li> </ol>"},{"location":"developer/testing/#viewing-ci-results","title":"Viewing CI Results","text":"<p>You can view the CI results on the GitHub Actions tab of the repository. Failed tests will be highlighted, and you can see the test output for debugging.</p>"},{"location":"developer/testing/#manual-testing","title":"Manual Testing","text":"<p>In addition to automated tests, manual testing is important for ensuring the integration works correctly with real devices.</p>"},{"location":"developer/testing/#manual-testing-checklist","title":"Manual Testing Checklist","text":"<ol> <li>Installation</li> <li>Install the integration via HACS</li> <li> <p>Install the integration manually</p> </li> <li> <p>Configuration</p> </li> <li>Add the integration through the UI</li> <li>Configure with valid credentials</li> <li>Configure with invalid credentials (should show error)</li> <li> <p>Reconfigure existing integration</p> </li> <li> <p>Basic Functionality</p> </li> <li>Turn system on/off</li> <li>Change mode (cool, heat, fan, auto)</li> <li>Change temperature</li> <li> <p>Change fan speed</p> </li> <li> <p>Zone Control</p> </li> <li>Enable/disable zones</li> <li> <p>Set zone-specific temperatures</p> </li> <li> <p>Error Handling</p> </li> <li>Disconnect internet and verify appropriate error handling</li> <li> <p>Simulate API errors and verify recovery</p> </li> <li> <p>Performance</p> </li> <li>Monitor memory usage</li> <li>Check responsiveness of controls</li> </ol>"},{"location":"developer/testing/#testing-with-a-development-environment","title":"Testing with a Development Environment","text":"<p>For testing with a development environment:</p> <ol> <li> <p>Create a test Home Assistant instance:    <pre><code>python -m homeassistant --config ./config\n</code></pre></p> </li> <li> <p>Symlink the integration to the test instance:    <pre><code>ln -s /path/to/ha-actronair-neo/custom_components/actronair_neo /path/to/config/custom_components/\n</code></pre></p> </li> <li> <p>Restart the test instance and test the integration</p> </li> </ol>"},{"location":"developer/testing/#conclusion","title":"Conclusion","text":"<p>Thorough testing is essential for maintaining a high-quality integration. By following this guide, you can ensure that your contributions to the ActronAir Neo integration are well-tested and reliable.</p>"},{"location":"developer/type_system/","title":"Type System","text":"<p>This document explains the type system used in the ActronAir Neo integration, including the TypedDict classes, type annotations, and best practices for type safety.</p>"},{"location":"developer/type_system/#overview","title":"Overview","text":"<p>The ActronAir Neo integration uses Python's type hints throughout the codebase to ensure type safety and improve code quality. The main types are defined in <code>types.py</code> and are used consistently across the integration.</p>"},{"location":"developer/type_system/#core-type-definitions","title":"Core Type Definitions","text":""},{"location":"developer/type_system/#actronneodeviceinfo","title":"<code>ActronNeoDeviceInfo</code>","text":"<p>Represents information about an ActronAir Neo device.</p> <pre><code>class ActronNeoDeviceInfo(TypedDict):\n    \"\"\"Type for ActronAir Neo device information.\"\"\"\n    serial: str\n    name: str\n    type: str\n    id: str\n</code></pre>"},{"location":"developer/type_system/#actronneozoneinfo","title":"<code>ActronNeoZoneInfo</code>","text":"<p>Represents information about a zone in an ActronAir Neo system.</p> <pre><code>class ActronNeoZoneInfo(TypedDict):\n    \"\"\"Type for ActronAir Neo zone information.\"\"\"\n    index: int\n    name: str\n    enabled: bool\n    temperature: float\n    humidity: Optional[float]\n    setpoint: float\n    type: str\n    temperature_available: bool\n    control_available: bool\n    is_master: bool\n</code></pre>"},{"location":"developer/type_system/#actronneomaininfo","title":"<code>ActronNeoMainInfo</code>","text":"<p>Represents the main information about an ActronAir Neo system.</p> <pre><code>class ActronNeoMainInfo(TypedDict):\n    \"\"\"Type for ActronAir Neo main system information.\"\"\"\n    temperature: float\n    humidity: float\n    is_on: bool\n    mode: str\n    fan_mode: str\n    cool_setpoint: float\n    heat_setpoint: float\n    filter_status: bool\n    filter_days_remaining: int\n    compressor_mode: str\n    compressor_state: str\n    fan_state: str\n    defrost_mode: bool\n    away_mode: bool\n    quiet_mode: bool\n</code></pre>"},{"location":"developer/type_system/#actronneorawdata","title":"<code>ActronNeoRawData</code>","text":"<p>Represents the raw data received from the ActronAir Neo API.</p> <pre><code>class ActronNeoRawData(TypedDict):\n    \"\"\"Type for raw ActronAir Neo API response data.\"\"\"\n    lastKnownState: Dict[str, Any]\n</code></pre>"},{"location":"developer/type_system/#actronneodata","title":"<code>ActronNeoData</code>","text":"<p>Represents the processed data used by the coordinator and entities.</p> <pre><code>class ActronNeoData:\n    \"\"\"Class to hold data from ActronAir Neo API.\"\"\"\n\n    def __init__(\n        self,\n        main: ActronNeoMainInfo,\n        zones: List[ActronNeoZoneInfo],\n        raw_data: ActronNeoRawData\n    ) -&gt; None:\n        \"\"\"Initialize the data class.\"\"\"\n        self.main = main\n        self.zones = zones\n        self.raw_data = raw_data\n</code></pre>"},{"location":"developer/type_system/#using-type-annotations","title":"Using Type Annotations","text":""},{"location":"developer/type_system/#function-annotations","title":"Function Annotations","text":"<p>All functions and methods should include type annotations for parameters and return values.</p> <pre><code>def get_zone_temperature(zone_index: int) -&gt; float:\n    \"\"\"Get the temperature for a specific zone.\n\n    Args:\n        zone_index: The index of the zone\n\n    Returns:\n        The temperature in degrees Celsius\n    \"\"\"\n    # Implementation\n    return 21.5\n</code></pre>"},{"location":"developer/type_system/#variable-annotations","title":"Variable Annotations","text":"<p>Variables should be annotated, especially in class definitions.</p> <pre><code>class ActronNeoClimate(ClimateEntity):\n    \"\"\"ActronAir Neo climate entity.\"\"\"\n\n    _attr_name: str\n    _attr_unique_id: str\n    _enable_turn_on_off_backwards_compatibility: bool = False\n    _coordinator: ActronDataCoordinator\n    _zone_index: Optional[int] = None\n</code></pre>"},{"location":"developer/type_system/#optional-types","title":"Optional Types","text":"<p>Use <code>Optional[T]</code> for values that might be None.</p> <pre><code>def get_zone_humidity(zone_index: int) -&gt; Optional[float]:\n    \"\"\"Get the humidity for a specific zone if available.\n\n    Args:\n        zone_index: The index of the zone\n\n    Returns:\n        The humidity in percent, or None if not available\n    \"\"\"\n    # Implementation\n    return None\n</code></pre>"},{"location":"developer/type_system/#union-types","title":"Union Types","text":"<p>Use <code>Union[T1, T2, ...]</code> for values that might be one of several types.</p> <pre><code>def get_value(key: str) -&gt; Union[str, int, float, bool, None]:\n    \"\"\"Get a value from the system data.\n\n    Args:\n        key: The key to look up\n\n    Returns:\n        The value, which could be of various types\n    \"\"\"\n    # Implementation\n    return \"value\"\n</code></pre>"},{"location":"developer/type_system/#type-aliases","title":"Type Aliases","text":"<p>Use type aliases for complex types to improve readability.</p> <pre><code># Type aliases\nCommandType = Dict[str, Any]\nZoneList = List[ActronNeoZoneInfo]\n</code></pre>"},{"location":"developer/type_system/#type-checking","title":"Type Checking","text":"<p>The integration uses mypy for static type checking. To run type checking:</p> <pre><code>mypy custom_components/actronair_neo\n</code></pre>"},{"location":"developer/type_system/#common-type-issues-and-solutions","title":"Common Type Issues and Solutions","text":""},{"location":"developer/type_system/#missing-return-type-annotation","title":"Missing Return Type Annotation","text":"<pre><code># Bad\ndef get_temperature():\n    return 21.5\n\n# Good\ndef get_temperature() -&gt; float:\n    return 21.5\n</code></pre>"},{"location":"developer/type_system/#inconsistent-return-types","title":"Inconsistent Return Types","text":"<pre><code># Bad\ndef get_value(key: str) -&gt; str:\n    if key == \"temperature\":\n        return 21.5  # Error: Returning float, expected str\n    return \"value\"\n\n# Good\ndef get_value(key: str) -&gt; Union[str, float]:\n    if key == \"temperature\":\n        return 21.5\n    return \"value\"\n</code></pre>"},{"location":"developer/type_system/#missing-parameter-type-annotation","title":"Missing Parameter Type Annotation","text":"<pre><code># Bad\ndef set_temperature(temperature):\n    # Implementation\n    pass\n\n# Good\ndef set_temperature(temperature: float) -&gt; None:\n    # Implementation\n    pass\n</code></pre>"},{"location":"developer/type_system/#any-type","title":"Any Type","text":"<p>Avoid using <code>Any</code> when possible, but it's sometimes necessary for dynamic data.</p> <pre><code># Avoid when possible\ndef process_data(data: Any) -&gt; None:\n    # Implementation\n    pass\n\n# Better\ndef process_data(data: Dict[str, Any]) -&gt; None:\n    # Implementation\n    pass\n</code></pre>"},{"location":"developer/type_system/#best-practices","title":"Best Practices","text":""},{"location":"developer/type_system/#1-use-typeddict-for-api-responses","title":"1. Use TypedDict for API Responses","text":"<p>Use TypedDict to define the structure of API responses.</p> <pre><code>class ApiResponse(TypedDict):\n    status: str\n    data: Dict[str, Any]\n    error: Optional[str]\n</code></pre>"},{"location":"developer/type_system/#2-use-enums-for-constants","title":"2. Use Enums for Constants","text":"<p>Use Enum classes for constants with a fixed set of values.</p> <pre><code>from enum import Enum, auto\n\nclass HvacMode(str, Enum):\n    \"\"\"HVAC mode enum.\"\"\"\n    OFF = \"off\"\n    HEAT = \"heat\"\n    COOL = \"cool\"\n    AUTO = \"auto\"\n    FAN_ONLY = \"fan_only\"\n</code></pre>"},{"location":"developer/type_system/#3-document-complex-types","title":"3. Document Complex Types","text":"<p>Add docstrings to complex type definitions.</p> <pre><code>class ActronNeoZoneInfo(TypedDict):\n    \"\"\"Type for ActronAir Neo zone information.\n\n    Attributes:\n        index: The zone index (0-7)\n        name: The zone name\n        enabled: Whether the zone is enabled\n        temperature: The current temperature in degrees Celsius\n        humidity: The current humidity in percent, if available\n        setpoint: The target temperature in degrees Celsius\n        type: The zone type\n        temperature_available: Whether temperature sensing is available\n        control_available: Whether the zone can be controlled\n        is_master: Whether this is the master zone\n    \"\"\"\n    index: int\n    name: str\n    enabled: bool\n    temperature: float\n    humidity: Optional[float]\n    setpoint: float\n    type: str\n    temperature_available: bool\n    control_available: bool\n    is_master: bool\n</code></pre>"},{"location":"developer/type_system/#4-use-type-guards","title":"4. Use Type Guards","text":"<p>Use type guards to narrow types in conditional blocks.</p> <pre><code>from typing import TypeGuard\n\ndef is_zone_info(obj: Any) -&gt; TypeGuard[ActronNeoZoneInfo]:\n    \"\"\"Check if an object is a valid zone info object.\"\"\"\n    return (\n        isinstance(obj, dict)\n        and \"index\" in obj\n        and \"name\" in obj\n        and \"enabled\" in obj\n    )\n\ndef process_zone(zone: Any) -&gt; None:\n    if is_zone_info(zone):\n        # Now TypeScript knows zone is ActronNeoZoneInfo\n        print(f\"Zone {zone['name']} is {'enabled' if zone['enabled'] else 'disabled'}\")\n    else:\n        print(\"Not a valid zone\")\n</code></pre>"},{"location":"developer/type_system/#5-use-protocol-for-duck-typing","title":"5. Use Protocol for Duck Typing","text":"<p>Use Protocol for structural typing (duck typing).</p> <pre><code>from typing import Protocol\n\nclass HasTemperature(Protocol):\n    \"\"\"Protocol for objects that have a temperature.\"\"\"\n    temperature: float\n\ndef print_temperature(obj: HasTemperature) -&gt; None:\n    \"\"\"Print the temperature of an object.\"\"\"\n    print(f\"Temperature: {obj.temperature}\u00b0C\")\n\n# Can be used with any object that has a temperature attribute\nprint_temperature({\"temperature\": 21.5})\n</code></pre>"},{"location":"developer/type_system/#type-compatibility-with-home-assistant","title":"Type Compatibility with Home Assistant","text":"<p>The integration uses Home Assistant's type definitions where appropriate.</p> <pre><code>from homeassistant.components.climate import (\n    ClimateEntity,\n    ClimateEntityFeature,\n    HVACMode,\n    HVACAction,\n)\n\nclass ActronNeoClimate(ClimateEntity):\n    \"\"\"ActronAir Neo climate entity.\"\"\"\n\n    _attr_hvac_modes: list[HVACMode] = [\n        HVACMode.OFF,\n        HVACMode.COOL,\n        HVACMode.HEAT,\n        HVACMode.FAN_ONLY,\n        HVACMode.AUTO,\n    ]\n</code></pre>"},{"location":"developer/type_system/#conclusion","title":"Conclusion","text":"<p>Using a consistent type system throughout the codebase helps catch errors early, improves code readability, and makes the integration more maintainable. By following these guidelines, you can ensure that your contributions to the ActronAir Neo integration maintain high type safety standards.</p>"},{"location":"user/configuration/","title":"Configuration Guide","text":"<p>This guide will walk you through the process of configuring the ActronAir Neo integration after installation.</p>"},{"location":"user/configuration/#initial-setup","title":"Initial Setup","text":"<p>After installing the ActronAir Neo integration, you need to configure it with your account credentials and system settings.</p>"},{"location":"user/configuration/#adding-the-integration","title":"Adding the Integration","text":"<ol> <li>In Home Assistant, navigate to Configuration &gt; Integrations</li> <li>Click the + ADD INTEGRATION button in the bottom right corner</li> <li>Search for \"ActronAir Neo\" and select it from the list</li> <li>You will be presented with a configuration form</li> </ol>"},{"location":"user/configuration/#configuration-options","title":"Configuration Options","text":"<p>Fill in the following information:</p> Field Description Username Your ActronAir Neo account username (email address) Password Your ActronAir Neo account password Update Interval How often the integration should fetch data from the ActronAir Neo API (in seconds) Enable Zone Control Toggle to enable or disable zone control functionality"},{"location":"user/configuration/#authentication","title":"Authentication","text":"<p>The integration will attempt to authenticate with the ActronAir Neo API using the provided credentials. If successful, it will discover all available air conditioning systems associated with your account.</p> <p>If you have multiple systems, you will be prompted to select which one you want to control.</p>"},{"location":"user/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"user/configuration/#update-interval","title":"Update Interval","text":"<p>The default update interval is set to 60 seconds. You can adjust this based on your needs:</p> <ul> <li>Lower interval (e.g., 30 seconds): More responsive but may hit API rate limits</li> <li>Higher interval (e.g., 120 seconds): Less responsive but reduces API calls</li> </ul>"},{"location":"user/configuration/#zone-control","title":"Zone Control","text":"<p>If your ActronAir Neo system supports zones, enabling the zone control option will create additional entities for each zone, allowing you to:</p> <ul> <li>Control temperature settings for individual zones</li> <li>Turn zones on or off independently</li> <li>Monitor zone-specific temperature and humidity readings</li> </ul>"},{"location":"user/configuration/#reconfiguring-the-integration","title":"Reconfiguring the Integration","text":"<p>If you need to change any configuration options after the initial setup:</p> <ol> <li>Go to Configuration &gt; Integrations</li> <li>Find the ActronAir Neo integration and click on it</li> <li>Click the CONFIGURE button</li> <li>Update the settings as needed and click SUBMIT</li> </ol>"},{"location":"user/configuration/#configuration-via-yaml","title":"Configuration via YAML","text":"<p>While the integration is primarily configured through the UI, you can also add some advanced options via YAML if needed:</p> <pre><code># Example configuration.yaml entry\nactronair_neo:\n  scan_interval: 60\n  enable_zone_control: true\n</code></pre> <p>Note: UI configuration is recommended over YAML configuration for this integration.</p>"},{"location":"user/configuration/#entities-created","title":"Entities Created","text":"<p>After configuration, the integration will create the following entities:</p> <ul> <li>Climate entity: Main control for your ActronAir Neo system</li> <li>Temperature sensors: For each zone and the main unit</li> <li>Humidity sensors: For zones that support humidity readings</li> <li>Binary sensors: For system status and filter condition</li> <li>Switches: For enabling/disabling zones</li> </ul>"},{"location":"user/configuration/#next-steps","title":"Next Steps","text":"<p>After configuring the integration, proceed to the Usage Guide to learn how to control your ActronAir Neo system through Home Assistant.</p>"},{"location":"user/faq/","title":"Frequently Asked Questions (FAQ)","text":"<p>This document answers common questions about the ActronAir Neo integration for Home Assistant.</p>"},{"location":"user/faq/#general-questions","title":"General Questions","text":""},{"location":"user/faq/#what-is-the-actronair-neo-integration","title":"What is the ActronAir Neo integration?","text":"<p>The ActronAir Neo integration allows you to control and monitor your ActronAir Neo air conditioning system through Home Assistant. It connects to the ActronAir Neo cloud API to provide seamless control of your system.</p>"},{"location":"user/faq/#which-actronair-models-are-supported","title":"Which ActronAir models are supported?","text":"<p>This integration supports all ActronAir Neo models that can connect to the ActronAir Neo cloud service. This includes: - ActronAir Neo Series - ActronAir Que Series (with Neo connectivity) - Other ActronAir models with Neo connectivity</p>"},{"location":"user/faq/#is-this-an-official-actronair-integration","title":"Is this an official ActronAir integration?","text":"<p>No, this integration is not officially associated with or endorsed by ActronAir. It is a community-developed integration that interacts with the ActronAir Neo API.</p>"},{"location":"user/faq/#does-this-integration-work-without-internet","title":"Does this integration work without internet?","text":"<p>No, this integration requires internet connectivity as it communicates with the ActronAir Neo cloud API. If your internet connection is down, the integration will not be able to control your system.</p>"},{"location":"user/faq/#setup-and-configuration","title":"Setup and Configuration","text":""},{"location":"user/faq/#why-cant-i-find-the-integration-in-the-home-assistant-integration-list","title":"Why can't I find the integration in the Home Assistant integration list?","text":"<p>If you can't find the integration after installation, try the following: 1. Make sure you've restarted Home Assistant after installation 2. Check that the integration files are in the correct location 3. Clear your browser cache and reload the Home Assistant web interface 4. Search for \"ActronAir\" (without \"Neo\") as it might be listed that way</p>"},{"location":"user/faq/#how-often-does-the-integration-update-data-from-my-system","title":"How often does the integration update data from my system?","text":"<p>By default, the integration updates data every 60 seconds. You can adjust this interval in the integration configuration settings. A shorter interval provides more responsive updates but may hit API rate limits.</p>"},{"location":"user/faq/#can-i-control-multiple-actronair-neo-systems","title":"Can I control multiple ActronAir Neo systems?","text":"<p>Yes, if you have multiple systems linked to your ActronAir Neo account, the integration will discover all of them. Each system will appear as a separate climate entity in Home Assistant.</p>"},{"location":"user/faq/#why-are-some-zones-not-appearing","title":"Why are some zones not appearing?","text":"<p>If you have zones that aren't appearing in Home Assistant: 1. Make sure \"Enable Zone Control\" is toggled on in the integration configuration 2. Verify that the zones are properly configured in your ActronAir Neo system 3. Some zones might be disabled at the system level</p>"},{"location":"user/faq/#features-and-functionality","title":"Features and Functionality","text":""},{"location":"user/faq/#can-i-control-individual-zone-temperatures","title":"Can I control individual zone temperatures?","text":"<p>Yes, if your ActronAir Neo system supports zone temperature control, you can set different target temperatures for each zone. Each zone will have its own climate entity in Home Assistant.</p>"},{"location":"user/faq/#does-the-integration-support-schedules","title":"Does the integration support schedules?","text":"<p>The integration itself doesn't implement scheduling, but you can create schedules using Home Assistant's automation system. See the Usage Guide for examples of scheduling automations.</p>"},{"location":"user/faq/#can-i-see-energy-usage-statistics","title":"Can I see energy usage statistics?","text":"<p>Currently, the integration doesn't provide energy usage statistics. This feature may be added in future updates if the ActronAir Neo API provides this data.</p>"},{"location":"user/faq/#does-the-integration-support-away-mode","title":"Does the integration support away mode?","text":"<p>Yes, if your ActronAir Neo system supports away mode, you can control it through the integration. Away mode appears as an option in the climate entity.</p>"},{"location":"user/faq/#can-i-control-the-system-with-voice-assistants","title":"Can I control the system with voice assistants?","text":"<p>Yes, since the integration creates standard Home Assistant climate entities, you can control your ActronAir Neo system with any voice assistant that integrates with Home Assistant, such as Google Assistant, Amazon Alexa, or Apple HomeKit.</p>"},{"location":"user/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user/faq/#why-does-the-integration-show-unavailable-after-working-fine","title":"Why does the integration show \"Unavailable\" after working fine?","text":"<p>This usually indicates a connection issue. Possible causes include: 1. Internet connectivity problems 2. ActronAir Neo cloud service outage 3. API rate limiting 4. Authentication token expiration</p> <p>See the Troubleshooting Guide for more detailed solutions.</p>"},{"location":"user/faq/#why-are-temperature-changes-not-taking-effect","title":"Why are temperature changes not taking effect?","text":"<p>If temperature changes made in Home Assistant aren't affecting your actual system: 1. Check if the system is in a mode that accepts temperature changes (e.g., not in Fan Only mode) 2. Verify that the temperature is within the allowed range for your system 3. Check if there are any conflicts with the system's built-in scheduling 4. Look for error messages in the Home Assistant logs</p>"},{"location":"user/faq/#how-do-i-fix-authentication-failed-errors","title":"How do I fix \"Authentication Failed\" errors?","text":"<p>If you're seeing authentication errors: 1. Verify your username and password are correct 2. Try logging out and back in to the ActronAir Neo mobile app 3. Remove and re-add the integration in Home Assistant 4. Check if your ActronAir Neo account has any security restrictions</p>"},{"location":"user/faq/#the-integration-is-using-too-many-api-calls-how-can-i-reduce-them","title":"The integration is using too many API calls. How can I reduce them?","text":"<p>To reduce API calls: 1. Increase the update interval in the integration configuration 2. Limit the number of automations that control the system 3. Use the state of the climate entity for conditions rather than repeatedly polling sensors</p>"},{"location":"user/faq/#advanced-usage","title":"Advanced Usage","text":""},{"location":"user/faq/#can-i-access-raw-api-data-from-the-system","title":"Can I access raw API data from the system?","text":"<p>Yes, the integration stores the raw API data in the coordinator. Advanced users can access this data for custom templates or scripts. The data is available in the <code>coordinator.data.raw_data</code> attribute.</p>"},{"location":"user/faq/#how-can-i-contribute-to-the-integration","title":"How can I contribute to the integration?","text":"<p>Contributions are welcome! See the Contributing Guide for information on how to contribute to the integration.</p>"},{"location":"user/faq/#can-i-use-this-integration-with-mqtt","title":"Can I use this integration with MQTT?","text":"<p>The integration doesn't use MQTT directly, but you can create MQTT entities that mirror the state of the ActronAir Neo entities using Home Assistant's MQTT integration and automations.</p>"},{"location":"user/faq/#is-there-an-api-documentation-for-developers","title":"Is there an API documentation for developers?","text":"<p>Yes, see the API Reference for detailed information about the ActronAir Neo API and how the integration interacts with it.</p>"},{"location":"user/faq/#still-have-questions","title":"Still Have Questions?","text":"<p>If your question isn't answered here, check the Troubleshooting Guide or open an issue on the GitHub repository.</p>"},{"location":"user/installation/","title":"Installation Guide","text":"<p>This guide will walk you through the process of installing the ActronAir Neo integration for Home Assistant.</p>"},{"location":"user/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing the ActronAir Neo integration, ensure you have:</p> <ul> <li>A working Home Assistant installation (version 2023.1.0 or newer)</li> <li>An ActronAir Neo air conditioning system</li> <li>Your ActronAir Neo account credentials (username and password)</li> <li>Network connectivity between your Home Assistant instance and the internet</li> </ul>"},{"location":"user/installation/#installation-methods","title":"Installation Methods","text":"<p>There are two ways to install the ActronAir Neo integration:</p>"},{"location":"user/installation/#method-1-hacs-recommended","title":"Method 1: HACS (Recommended)","text":"<p>The Home Assistant Community Store (HACS) provides an easy way to install and update the integration.</p> <ol> <li>Ensure you have HACS installed on your Home Assistant instance</li> <li>Navigate to HACS in your Home Assistant sidebar</li> <li>Click on \"Integrations\"</li> <li>Click the \"+\" button in the bottom right corner</li> <li>Search for \"ActronAir Neo\"</li> <li>Click on the integration and then click \"Download\"</li> <li>Restart Home Assistant after the installation is complete</li> </ol> <p>You can also use this button to directly open the repository in HACS:</p> <p></p>"},{"location":"user/installation/#method-2-manual-installation","title":"Method 2: Manual Installation","text":"<p>If you prefer to install the integration manually:</p> <ol> <li>Download the latest release from the GitHub repository</li> <li>Extract the contents</li> <li>Copy the <code>custom_components/actronair_neo</code> folder to your Home Assistant's <code>custom_components</code> directory</li> <li>Restart Home Assistant</li> </ol> <pre><code># Example commands for manual installation\ncd /tmp\nwget https://github.com/domalab/ha-actronair-neo/archive/refs/heads/main.zip\nunzip main.zip\ncp -r ha-actronair-neo-main/custom_components/actronair_neo /path/to/your/homeassistant/custom_components/\n</code></pre> <p>Replace <code>/path/to/your/homeassistant/</code> with the actual path to your Home Assistant configuration directory.</p>"},{"location":"user/installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation and restarting Home Assistant, you should be able to add the ActronAir Neo integration through the Home Assistant UI:</p> <ol> <li>Navigate to Configuration &gt; Integrations</li> <li>Click the \"+ ADD INTEGRATION\" button</li> <li>Search for \"ActronAir Neo\"</li> </ol> <p>If the integration appears in the search results, the installation was successful.</p>"},{"location":"user/installation/#troubleshooting-installation-issues","title":"Troubleshooting Installation Issues","text":"<p>If you encounter issues during installation:</p> <ul> <li>Check the Home Assistant logs for any error messages</li> <li>Ensure your Home Assistant version is compatible (2023.1.0 or newer)</li> <li>Verify that the integration files are in the correct location</li> <li>Make sure you have restarted Home Assistant after installation</li> </ul> <p>For more detailed troubleshooting, see the Troubleshooting Guide.</p>"},{"location":"user/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation, proceed to the Configuration Guide to set up your ActronAir Neo integration.</p>"},{"location":"user/troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide helps you diagnose and resolve common issues with the ActronAir Neo integration.</p>"},{"location":"user/troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"user/troubleshooting/#connection-problems","title":"Connection Problems","text":""},{"location":"user/troubleshooting/#issue-integration-cannot-connect-to-actronair-neo-api","title":"Issue: Integration Cannot Connect to ActronAir Neo API","text":"<p>Symptoms: - Error message during setup: \"Cannot connect to ActronAir Neo API\" - Integration shows as \"Unavailable\" in Home Assistant</p> <p>Possible Causes and Solutions:</p> <ol> <li>Incorrect Credentials</li> <li>Double-check your username and password</li> <li>Try logging in to the ActronAir Neo mobile app to verify credentials</li> <li> <p>Reset your password if necessary</p> </li> <li> <p>Network Issues</p> </li> <li>Ensure your Home Assistant instance has internet access</li> <li>Check if your network has any firewall rules blocking outbound connections</li> <li> <p>Try restarting your network equipment</p> </li> <li> <p>API Rate Limiting</p> </li> <li>The ActronAir Neo API has rate limits that may temporarily block access</li> <li>Increase the update interval in the integration configuration</li> <li> <p>Wait 15-30 minutes and try again</p> </li> <li> <p>ActronAir Neo Service Outage</p> </li> <li>Check if the ActronAir Neo service is experiencing an outage</li> <li>Wait for the service to be restored</li> </ol>"},{"location":"user/troubleshooting/#entity-issues","title":"Entity Issues","text":""},{"location":"user/troubleshooting/#issue-missing-entities","title":"Issue: Missing Entities","text":"<p>Symptoms: - Some expected entities are not appearing in Home Assistant - Zone entities are missing</p> <p>Possible Causes and Solutions:</p> <ol> <li>Zone Control Not Enabled</li> <li>Ensure \"Enable Zone Control\" is toggled on in the integration configuration</li> <li> <p>Reconfigure the integration to enable zone control</p> </li> <li> <p>Unsupported Features</p> </li> <li>Your ActronAir Neo model may not support all features</li> <li> <p>Check your model's specifications for supported features</p> </li> <li> <p>Entity Registry Issues</p> </li> <li>Check if entities are hidden in the entity registry</li> <li>Go to Configuration &gt; Entities and search for \"actronair\"</li> <li>Unhide any hidden entities</li> </ol>"},{"location":"user/troubleshooting/#issue-entities-show-as-unavailable","title":"Issue: Entities Show as \"Unavailable\"","text":"<p>Symptoms: - Entities appear in Home Assistant but show as \"Unavailable\" - Controls don't work</p> <p>Possible Causes and Solutions:</p> <ol> <li>Communication Issues</li> <li>Check if the integration can communicate with the ActronAir Neo API</li> <li>Look for error messages in the Home Assistant logs</li> <li> <p>Restart the integration</p> </li> <li> <p>System Offline</p> </li> <li>Verify that your ActronAir Neo system is powered on and connected to the internet</li> <li>Check the system status in the ActronAir Neo mobile app</li> </ol>"},{"location":"user/troubleshooting/#control-problems","title":"Control Problems","text":""},{"location":"user/troubleshooting/#issue-cannot-control-system","title":"Issue: Cannot Control System","text":"<p>Symptoms: - Commands sent from Home Assistant don't affect the actual system - Temperature or mode changes don't take effect</p> <p>Possible Causes and Solutions:</p> <ol> <li>Permission Issues</li> <li>Ensure your ActronAir Neo account has permission to control the system</li> <li> <p>Check if multiple accounts are trying to control the system simultaneously</p> </li> <li> <p>System in Special Mode</p> </li> <li>The system may be in a special mode (e.g., service mode, firmware update)</li> <li> <p>Check the system status and wait for the special mode to complete</p> </li> <li> <p>Command Conflicts</p> </li> <li>Multiple automations or scripts may be sending conflicting commands</li> <li> <p>Review your automations and scripts for potential conflicts</p> </li> <li> <p>API Limitations</p> </li> <li>Some commands may not be supported by the API</li> <li>Check the API documentation for supported commands</li> </ol>"},{"location":"user/troubleshooting/#diagnostic-steps","title":"Diagnostic Steps","text":""},{"location":"user/troubleshooting/#checking-logs","title":"Checking Logs","text":"<p>Home Assistant logs can provide valuable information for troubleshooting:</p> <ol> <li>Navigate to Configuration &gt; Logs</li> <li>Set the log level to \"Debug\" temporarily</li> <li>Search for \"actronair_neo\" to find relevant log entries</li> <li>Look for error messages or warnings</li> </ol> <p>Alternatively, you can check the logs via the command line:</p> <pre><code>grep -i \"actronair_neo\" ~/.homeassistant/home-assistant.log\n</code></pre>"},{"location":"user/troubleshooting/#testing-api-connectivity","title":"Testing API Connectivity","text":"<p>You can test connectivity to the ActronAir Neo API using curl:</p> <pre><code>curl -I https://nimbus.actronair.com.au/api/v0/client/ac-systems\n</code></pre> <p>A successful response should return HTTP status 200 or 401 (unauthorized).</p>"},{"location":"user/troubleshooting/#restarting-the-integration","title":"Restarting the Integration","text":"<p>Sometimes restarting the integration can resolve issues:</p> <ol> <li>Go to Configuration &gt; Integrations</li> <li>Find the ActronAir Neo integration</li> <li>Click the three dots menu (\u22ee)</li> <li>Select Reload</li> </ol> <p>If reloading doesn't help, try removing and re-adding the integration.</p>"},{"location":"user/troubleshooting/#advanced-troubleshooting","title":"Advanced Troubleshooting","text":""},{"location":"user/troubleshooting/#enabling-debug-logging","title":"Enabling Debug Logging","text":"<p>You can enable debug logging for the integration by adding the following to your <code>configuration.yaml</code>:</p> <pre><code>logger:\n  default: info\n  logs:\n    custom_components.actronair_neo: debug\n</code></pre> <p>Restart Home Assistant after making this change.</p>"},{"location":"user/troubleshooting/#checking-api-responses","title":"Checking API Responses","text":"<p>For advanced users, you can examine the raw API responses:</p> <ol> <li>Enable debug logging as described above</li> <li>Trigger an update by changing a setting</li> <li>Check the logs for API request and response details</li> <li>Look for any error codes or unexpected values</li> </ol>"},{"location":"user/troubleshooting/#reporting-issues","title":"Reporting Issues","text":"<p>If you've tried the troubleshooting steps and still have issues:</p> <ol> <li>Gather relevant information:</li> <li>Home Assistant version</li> <li>ActronAir Neo integration version</li> <li>Error messages from logs</li> <li> <p>Steps to reproduce the issue</p> </li> <li> <p>Report the issue on GitHub:</p> </li> <li>Go to the GitHub Issues page</li> <li>Click \"New Issue\"</li> <li>Provide a clear description and the information gathered above</li> </ol>"},{"location":"user/troubleshooting/#next-steps","title":"Next Steps","text":"<p>If you're still experiencing issues after trying these troubleshooting steps, check the FAQ for more information or reach out to the community for help.</p>"},{"location":"user/usage/","title":"Usage Guide","text":"<p>This guide explains how to use the ActronAir Neo integration in Home Assistant after installation and configuration.</p>"},{"location":"user/usage/#climate-control","title":"Climate Control","text":"<p>The main climate entity allows you to control your ActronAir Neo system's primary functions.</p>"},{"location":"user/usage/#climate-entity-card","title":"Climate Entity Card","text":"<p>The climate entity appears in your Home Assistant dashboard as a climate card:</p> <p></p>"},{"location":"user/usage/#available-controls","title":"Available Controls","text":"<p>From the climate card, you can:</p> <ul> <li>Power: Turn the system on or off</li> <li>Mode: Switch between Heat, Cool, Fan Only, and Auto modes</li> <li>Temperature: Set the target temperature</li> <li>Fan Speed: Select Low, Medium, High, or Auto fan speeds</li> </ul>"},{"location":"user/usage/#climate-modes","title":"Climate Modes","text":"Mode Description Heat System will heat the space to the target temperature Cool System will cool the space to the target temperature Fan Only Only the fan will run, no heating or cooling Auto System will automatically switch between heating and cooling to maintain the target temperature"},{"location":"user/usage/#fan-modes","title":"Fan Modes","text":"Fan Mode Description Low Fan runs at low speed Medium Fan runs at medium speed High Fan runs at high speed Auto Fan speed is automatically adjusted based on the difference between current and target temperatures"},{"location":"user/usage/#zone-control","title":"Zone Control","text":"<p>If you have enabled zone control during configuration, you'll have additional entities for controlling individual zones.</p>"},{"location":"user/usage/#zone-climate-entities","title":"Zone Climate Entities","text":"<p>Each zone has its own climate entity that allows you to:</p> <ul> <li>Turn the zone on or off</li> <li>Set a zone-specific target temperature</li> <li>View the current temperature in that zone</li> </ul>"},{"location":"user/usage/#zone-switches","title":"Zone Switches","text":"<p>You can also control zones using switch entities:</p> <p></p> <p>These switches allow you to quickly enable or disable specific zones without changing other settings.</p>"},{"location":"user/usage/#sensors","title":"Sensors","text":"<p>The integration creates several sensor entities that provide information about your system:</p>"},{"location":"user/usage/#temperature-sensors","title":"Temperature Sensors","text":"<ul> <li>Main Temperature: The temperature reading from the main unit</li> <li>Zone Temperatures: Individual temperature readings for each zone</li> </ul>"},{"location":"user/usage/#humidity-sensors","title":"Humidity Sensors","text":"<ul> <li>Main Humidity: The humidity reading from the main unit</li> <li>Zone Humidity: Individual humidity readings for zones that support it</li> </ul>"},{"location":"user/usage/#system-status-sensors","title":"System Status Sensors","text":"<ul> <li>Filter Status: Indicates if the filter needs cleaning</li> <li>System Health: Shows the overall health status of the system</li> <li>Operating Mode: Displays the current operating mode (heating, cooling, etc.)</li> </ul>"},{"location":"user/usage/#automations","title":"Automations","text":"<p>You can create powerful automations using the ActronAir Neo integration. Here are some examples:</p>"},{"location":"user/usage/#schedule-based-control","title":"Schedule-Based Control","text":"<pre><code># Turn on AC in cooling mode before arriving home\nautomation:\n  - alias: \"Pre-cool Home Before Arrival\"\n    trigger:\n      - platform: time\n        at: \"16:30:00\"\n    condition:\n      - condition: state\n        entity_id: binary_sensor.someone_home\n        state: \"off\"\n      - condition: numeric_state\n        entity_id: sensor.outside_temperature\n        above: 25\n    action:\n      - service: climate.set_hvac_mode\n        target:\n          entity_id: climate.actronair_neo\n        data:\n          hvac_mode: cool\n      - service: climate.set_temperature\n        target:\n          entity_id: climate.actronair_neo\n        data:\n          temperature: 24\n</code></pre>"},{"location":"user/usage/#temperature-based-control","title":"Temperature-Based Control","text":"<pre><code># Turn on heating when temperature drops below threshold\nautomation:\n  - alias: \"Auto Heating When Cold\"\n    trigger:\n      - platform: numeric_state\n        entity_id: sensor.actronair_neo_temperature\n        below: 18\n        for:\n          minutes: 10\n    condition:\n      - condition: state\n        entity_id: binary_sensor.someone_home\n        state: \"on\"\n    action:\n      - service: climate.set_hvac_mode\n        target:\n          entity_id: climate.actronair_neo\n        data:\n          hvac_mode: heat\n      - service: climate.set_temperature\n        target:\n          entity_id: climate.actronair_neo\n        data:\n          temperature: 21\n</code></pre>"},{"location":"user/usage/#zone-based-control","title":"Zone-Based Control","text":"<pre><code># Turn on specific zones based on room occupancy\nautomation:\n  - alias: \"Control Zones Based on Occupancy\"\n    trigger:\n      - platform: state\n        entity_id: binary_sensor.living_room_occupancy\n    action:\n      - service: switch.turn_on\n        target:\n          entity_id: switch.actronair_neo_zone_living_room\n        data: {}\n      - service: switch.turn_off\n        target:\n          entity_id: switch.actronair_neo_zone_bedroom\n        data: {}\n      - service: climate.set_temperature\n        target:\n          entity_id: climate.actronair_neo_zone_living_room\n        data:\n          temperature: 23\n</code></pre>"},{"location":"user/usage/#lovelace-ui-examples","title":"Lovelace UI Examples","text":"<p>Here are some examples of how to integrate ActronAir Neo entities into your Lovelace UI:</p>"},{"location":"user/usage/#basic-climate-card","title":"Basic Climate Card","text":"<pre><code>type: thermostat\nentity: climate.actronair_neo\n</code></pre>"},{"location":"user/usage/#detailed-climate-card","title":"Detailed Climate Card","text":"<pre><code>type: entities\ntitle: ActronAir Neo System\nentities:\n  - entity: climate.actronair_neo\n  - entity: sensor.actronair_neo_temperature\n  - entity: sensor.actronair_neo_humidity\n  - entity: binary_sensor.actronair_neo_filter_status\n  - entity: sensor.actronair_neo_operating_mode\n</code></pre>"},{"location":"user/usage/#zone-control-panel","title":"Zone Control Panel","text":"<pre><code>type: entities\ntitle: Zone Control\nentities:\n  - entity: switch.actronair_neo_zone_living_room\n  - entity: switch.actronair_neo_zone_kitchen\n  - entity: switch.actronair_neo_zone_master_bedroom\n  - entity: switch.actronair_neo_zone_bedroom_2\n</code></pre>"},{"location":"user/usage/#next-steps","title":"Next Steps","text":"<p>For troubleshooting common issues, see the Troubleshooting Guide.</p> <p>For frequently asked questions, see the FAQ.</p>"}]}